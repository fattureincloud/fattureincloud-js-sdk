/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.  For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateReceivedDocumentRequest from '../model/CreateReceivedDocumentRequest';
import CreateReceivedDocumentResponse from '../model/CreateReceivedDocumentResponse';
import GetExistingReceivedDocumentTotalsRequest from '../model/GetExistingReceivedDocumentTotalsRequest';
import GetExistingReceivedDocumentTotalsResponse from '../model/GetExistingReceivedDocumentTotalsResponse';
import GetNewReceivedDocumentTotalsRequest from '../model/GetNewReceivedDocumentTotalsRequest';
import GetNewReceivedDocumentTotalsResponse from '../model/GetNewReceivedDocumentTotalsResponse';
import GetReceivedDocumentPreCreateInfoResponse from '../model/GetReceivedDocumentPreCreateInfoResponse';
import GetReceivedDocumentResponse from '../model/GetReceivedDocumentResponse';
import ListReceivedDocumentsResponse from '../model/ListReceivedDocumentsResponse';
import ModifyReceivedDocumentRequest from '../model/ModifyReceivedDocumentRequest';
import ModifyReceivedDocumentResponse from '../model/ModifyReceivedDocumentResponse';
import UploadReceivedDocumentAttachmentResponse from '../model/UploadReceivedDocumentAttachmentResponse';

/**
* ReceivedDocuments service.
* @module FattureInCloud/api/ReceivedDocumentsApi
* @version 2.0.1
*/
export default class ReceivedDocumentsApi {

    /**
    * Constructs a new ReceivedDocumentsApi. 
    * @alias module:FattureInCloud/api/ReceivedDocumentsApi
    * @class
    * @param {module:FattureInCloud/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:FattureInCloud/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createReceivedDocument operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~createReceivedDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:FattureInCloud/model/CreateReceivedDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Received Document
     * Creates a new document.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:FattureInCloud/model/CreateReceivedDocumentRequest} opts.createReceivedDocumentRequest Document to create
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~createReceivedDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:FattureInCloud/model/CreateReceivedDocumentResponse}
     */
    createReceivedDocument(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createReceivedDocumentRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createReceivedDocument");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReceivedDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceivedDocument operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~deleteReceivedDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Received Document
     * Deletes the specified document.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~deleteReceivedDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceivedDocument(companyId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteReceivedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteReceivedDocument");
      }

      let pathParams = {
        'company_id': companyId,
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents/{document_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReceivedDocumentAttachment operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~deleteReceivedDocumentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Received Document Attachment
     * Removes the attachment of the specified document.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~deleteReceivedDocumentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReceivedDocumentAttachment(companyId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteReceivedDocumentAttachment");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteReceivedDocumentAttachment");
      }

      let pathParams = {
        'company_id': companyId,
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents/{document_id}/attachment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExistingReceivedDocumentTotals operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~getExistingReceivedDocumentTotalsCallback
     * @param {String} error Error message, if any.
     * @param {module:FattureInCloud/model/GetExistingReceivedDocumentTotalsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Existing Received Document Totals
     * Returns the totals for the specified document.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:FattureInCloud/model/GetExistingReceivedDocumentTotalsRequest} opts.getExistingReceivedDocumentTotalsRequest Received document.
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~getExistingReceivedDocumentTotalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:FattureInCloud/model/GetExistingReceivedDocumentTotalsResponse}
     */
    getExistingReceivedDocumentTotals(companyId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['getExistingReceivedDocumentTotalsRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getExistingReceivedDocumentTotals");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getExistingReceivedDocumentTotals");
      }

      let pathParams = {
        'company_id': companyId,
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetExistingReceivedDocumentTotalsResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents/{document_id}/totals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNewReceivedDocumentTotals operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~getNewReceivedDocumentTotalsCallback
     * @param {String} error Error message, if any.
     * @param {module:FattureInCloud/model/GetNewReceivedDocumentTotalsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get New Received Document Totals
     * Returns the totals for a new document.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:FattureInCloud/model/GetNewReceivedDocumentTotalsRequest} opts.getNewReceivedDocumentTotalsRequest Received document.
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~getNewReceivedDocumentTotalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:FattureInCloud/model/GetNewReceivedDocumentTotalsResponse}
     */
    getNewReceivedDocumentTotals(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['getNewReceivedDocumentTotalsRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getNewReceivedDocumentTotals");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNewReceivedDocumentTotalsResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents/totals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceivedDocument operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~getReceivedDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:FattureInCloud/model/GetReceivedDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Received Document
     * Gets the specified document.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:FattureInCloud/model/String} opts.fieldset Name of the fieldset.
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~getReceivedDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:FattureInCloud/model/GetReceivedDocumentResponse}
     */
    getReceivedDocument(companyId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getReceivedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getReceivedDocument");
      }

      let pathParams = {
        'company_id': companyId,
        'document_id': documentId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReceivedDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceivedDocumentPreCreateInfo operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~getReceivedDocumentPreCreateInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:FattureInCloud/model/GetReceivedDocumentPreCreateInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Received Document Pre-Create Info
     * Retrieves the information useful while creating a new document.
     * @param {Number} companyId The ID of the company.
     * @param {module:FattureInCloud/model/String} type The type of the received document.
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~getReceivedDocumentPreCreateInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:FattureInCloud/model/GetReceivedDocumentPreCreateInfoResponse}
     */
    getReceivedDocumentPreCreateInfo(companyId, type, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getReceivedDocumentPreCreateInfo");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getReceivedDocumentPreCreateInfo");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReceivedDocumentPreCreateInfoResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReceivedDocuments operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~listReceivedDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:FattureInCloud/model/ListReceivedDocumentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Received Documents
     * Lists the received documents.
     * @param {Number} companyId The ID of the company.
     * @param {module:FattureInCloud/model/String} type The type of the received document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:FattureInCloud/model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.perPage The size of the page. (default to 5)
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~listReceivedDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:FattureInCloud/model/ListReceivedDocumentsResponse}
     */
    listReceivedDocuments(companyId, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listReceivedDocuments");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listReceivedDocuments");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
        'type': type,
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListReceivedDocumentsResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyReceivedDocument operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~modifyReceivedDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:FattureInCloud/model/ModifyReceivedDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Received Document
     * Modifies the specified document.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:FattureInCloud/model/ModifyReceivedDocumentRequest} opts.modifyReceivedDocumentRequest Modified document.
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~modifyReceivedDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:FattureInCloud/model/ModifyReceivedDocumentResponse}
     */
    modifyReceivedDocument(companyId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyReceivedDocumentRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyReceivedDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling modifyReceivedDocument");
      }

      let pathParams = {
        'company_id': companyId,
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifyReceivedDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents/{document_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadReceivedDocumentAttachment operation.
     * @callback module:FattureInCloud/api/ReceivedDocumentsApi~uploadReceivedDocumentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:FattureInCloud/model/UploadReceivedDocumentAttachmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Received Document Attachment
     * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename Name of the file.
     * @param {File} opts.attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @param {module:FattureInCloud/api/ReceivedDocumentsApi~uploadReceivedDocumentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:FattureInCloud/model/UploadReceivedDocumentAttachmentResponse}
     */
    uploadReceivedDocumentAttachment(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling uploadReceivedDocumentAttachment");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filename': opts['filename'],
        'attachment': opts['attachment']
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UploadReceivedDocumentAttachmentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/received_documents/attachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
