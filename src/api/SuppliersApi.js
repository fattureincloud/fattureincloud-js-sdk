/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.  For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSupplierRequest from '../model/CreateSupplierRequest';
import CreateSupplierResponse from '../model/CreateSupplierResponse';
import GetSupplierResponse from '../model/GetSupplierResponse';
import ListSuppliersResponse from '../model/ListSuppliersResponse';
import ModifySupplierRequest from '../model/ModifySupplierRequest';
import ModifySupplierResponse from '../model/ModifySupplierResponse';

/**
* Suppliers service.
* @module api/SuppliersApi
* @version 2.0.1
*/
export default class SuppliersApi {

    /**
    * Constructs a new SuppliersApi. 
    * @alias module:api/SuppliersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSupplier operation.
     * @callback module:api/SuppliersApi~createSupplierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSupplierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Supplier
     * Creates a new supplier.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSupplierRequest} opts.createSupplierRequest The supplier to create
     * @param {module:api/SuppliersApi~createSupplierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSupplierResponse}
     */
    createSupplier(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createSupplierRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createSupplier");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSupplierResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSupplier operation.
     * @callback module:api/SuppliersApi~deleteSupplierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Supplier
     * Deletes the specified supplier.
     * @param {Number} companyId The ID of the company.
     * @param {Number} supplierId The ID of the supplier.
     * @param {module:api/SuppliersApi~deleteSupplierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSupplier(companyId, supplierId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteSupplier");
      }
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling deleteSupplier");
      }

      let pathParams = {
        'company_id': companyId,
        'supplier_id': supplierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers/{supplier_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupplier operation.
     * @callback module:api/SuppliersApi~getSupplierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSupplierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Supplier
     * Gets the specified supplier.
     * @param {Number} companyId The ID of the company.
     * @param {Number} supplierId The ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {module:api/SuppliersApi~getSupplierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSupplierResponse}
     */
    getSupplier(companyId, supplierId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getSupplier");
      }
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling getSupplier");
      }

      let pathParams = {
        'company_id': companyId,
        'supplier_id': supplierId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSupplierResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers/{supplier_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSuppliers operation.
     * @callback module:api/SuppliersApi~listSuppliersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSuppliersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Suppliers
     * Lists the suppliers.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.perPage The size of the page. (default to 5)
     * @param {module:api/SuppliersApi~listSuppliersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSuppliersResponse}
     */
    listSuppliers(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listSuppliers");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSuppliersResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifySupplier operation.
     * @callback module:api/SuppliersApi~modifySupplierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifySupplierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Supplier
     * Modifies the specified supplier.
     * @param {Number} companyId The ID of the company.
     * @param {Number} supplierId The ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifySupplierRequest} opts.modifySupplierRequest The modified Supplier. First level parameters are managed in delta mode.
     * @param {module:api/SuppliersApi~modifySupplierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifySupplierResponse}
     */
    modifySupplier(companyId, supplierId, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifySupplierRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifySupplier");
      }
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling modifySupplier");
      }

      let pathParams = {
        'company_id': companyId,
        'supplier_id': supplierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifySupplierResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers/{supplier_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
