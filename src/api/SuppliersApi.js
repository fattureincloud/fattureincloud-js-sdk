/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSupplierRequest from '../model/CreateSupplierRequest';
import CreateSupplierResponse from '../model/CreateSupplierResponse';
import GetSupplierResponse from '../model/GetSupplierResponse';
import ListSuppliersResponse from '../model/ListSuppliersResponse';
import ModifySupplierRequest from '../model/ModifySupplierRequest';
import ModifySupplierResponse from '../model/ModifySupplierResponse';

/**
* Suppliers service.
* @module api/SuppliersApi
* @version 2.0.3
*/
export default class SuppliersApi {

    /**
    * Constructs a new SuppliersApi. 
    * @alias module:api/SuppliersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Supplier
     * Creates a new supplier.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSupplierRequest} opts.CreateSupplierRequest The supplier to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateSupplierResponse} and HTTP response
     */
    createSupplierWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = opts['CreateSupplierRequest'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling createSupplier");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSupplierResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Supplier
     * Creates a new supplier.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSupplierRequest} opts.CreateSupplierRequest The supplier to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateSupplierResponse}
     */
    createSupplier(company_id, opts) {
      return this.createSupplierWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Supplier
     * Deletes the specified supplier.
     * @param {Number} company_id The ID of the company.
     * @param {Number} supplier_id The ID of the supplier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSupplierWithHttpInfo(company_id, supplier_id) {
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling deleteSupplier");
      }
      // verify the required parameter 'supplier_id' is set
      if (supplier_id === undefined || supplier_id === null) {
        throw new Error("Missing the required parameter 'supplier_id' when calling deleteSupplier");
      }

      let pathParams = {
        'company_id': company_id,
        'supplier_id': supplier_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers/{supplier_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Supplier
     * Deletes the specified supplier.
     * @param {Number} company_id The ID of the company.
     * @param {Number} supplier_id The ID of the supplier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSupplier(company_id, supplier_id) {
      return this.deleteSupplierWithHttpInfo(company_id, supplier_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Supplier
     * Gets the specified supplier.
     * @param {Number} company_id The ID of the company.
     * @param {Number} supplier_id The ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSupplierResponse} and HTTP response
     */
    getSupplierWithHttpInfo(company_id, supplier_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling getSupplier");
      }
      // verify the required parameter 'supplier_id' is set
      if (supplier_id === undefined || supplier_id === null) {
        throw new Error("Missing the required parameter 'supplier_id' when calling getSupplier");
      }

      let pathParams = {
        'company_id': company_id,
        'supplier_id': supplier_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSupplierResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers/{supplier_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Supplier
     * Gets the specified supplier.
     * @param {Number} company_id The ID of the company.
     * @param {Number} supplier_id The ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSupplierResponse}
     */
    getSupplier(company_id, supplier_id, opts) {
      return this.getSupplierWithHttpInfo(company_id, supplier_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Suppliers
     * Lists the suppliers.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.per_page The size of the page. (default to 5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSuppliersResponse} and HTTP response
     */
    listSuppliersWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling listSuppliers");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['per_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSuppliersResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Suppliers
     * Lists the suppliers.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.per_page The size of the page. (default to 5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSuppliersResponse}
     */
    listSuppliers(company_id, opts) {
      return this.listSuppliersWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify Supplier
     * Modifies the specified supplier.
     * @param {Number} company_id The ID of the company.
     * @param {Number} supplier_id The ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifySupplierRequest} opts.ModifySupplierRequest The modified Supplier. First level parameters are managed in delta mode.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifySupplierResponse} and HTTP response
     */
    modifySupplierWithHttpInfo(company_id, supplier_id, opts) {
      opts = opts || {};
      let postBody = opts['ModifySupplierRequest'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling modifySupplier");
      }
      // verify the required parameter 'supplier_id' is set
      if (supplier_id === undefined || supplier_id === null) {
        throw new Error("Missing the required parameter 'supplier_id' when calling modifySupplier");
      }

      let pathParams = {
        'company_id': company_id,
        'supplier_id': supplier_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifySupplierResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/entities/suppliers/{supplier_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Modify Supplier
     * Modifies the specified supplier.
     * @param {Number} company_id The ID of the company.
     * @param {Number} supplier_id The ID of the supplier.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifySupplierRequest} opts.ModifySupplierRequest The modified Supplier. First level parameters are managed in delta mode.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifySupplierResponse}
     */
    modifySupplier(company_id, supplier_id, opts) {
      return this.modifySupplierWithHttpInfo(company_id, supplier_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
