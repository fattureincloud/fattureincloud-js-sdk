/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient'
import GetEInvoiceRejectionReasonResponse from '../model/GetEInvoiceRejectionReasonResponse'
import SendEInvoiceResponse from '../model/SendEInvoiceResponse'
import VerifyEInvoiceXmlResponse from '../model/VerifyEInvoiceXmlResponse'

/**
* IssuedEInvoices service.
* @module api/IssuedEInvoicesApi
* @version 2.1.1
*/
export default class IssuedEInvoicesApi {
  /**
    * Constructs a new IssuedEInvoicesApi.
    * @alias module:api/IssuedEInvoicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  constructor (apiClient) {
    this.apiClient = apiClient || ApiClient.instance
  }

  /**
     * Get E-Invoice Rejection Reason
     * Get e-invoice rejection reason
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetEInvoiceRejectionReasonResponse} and HTTP response
     */
  getEInvoiceRejectionReasonWithHttpInfo (companyId, documentId) {
    const postBody = null
    // verify the required parameter 'companyId' is set
    if (companyId === undefined || companyId === null) {
      throw new Error("Missing the required parameter 'companyId' when calling getEInvoiceRejectionReason")
    }
    // verify the required parameter 'documentId' is set
    if (documentId === undefined || documentId === null) {
      throw new Error("Missing the required parameter 'documentId' when calling getEInvoiceRejectionReason")
    }

    const pathParams = {
      company_id: companyId,
      document_id: documentId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const authNames = ['OAuth2AuthenticationCodeFlow']
    const contentTypes = []
    const accepts = ['application/json']
    const returnType = GetEInvoiceRejectionReasonResponse
    return this.apiClient.callApi(
      '/c/{company_id}/issued_documents/{document_id}/e_invoice/error_reason', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Get E-Invoice Rejection Reason
     * Get e-invoice rejection reason
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetEInvoiceRejectionReasonResponse}
     */
  getEInvoiceRejectionReason (companyId, documentId) {
    return this.getEInvoiceRejectionReasonWithHttpInfo(companyId, documentId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Get E-Invoice XML
     * Downloads the e-invoice in XML format.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeAttachment] Include the attachment to the XML e-invoice.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
  getEInvoiceXmlWithHttpInfo (companyId, documentId, opts) {
    opts = opts || {}
    const postBody = null
    // verify the required parameter 'companyId' is set
    if (companyId === undefined || companyId === null) {
      throw new Error("Missing the required parameter 'companyId' when calling getEInvoiceXml")
    }
    // verify the required parameter 'documentId' is set
    if (documentId === undefined || documentId === null) {
      throw new Error("Missing the required parameter 'documentId' when calling getEInvoiceXml")
    }

    const pathParams = {
      company_id: companyId,
      document_id: documentId
    }
    const queryParams = {
      include_attachment: opts.includeAttachment
    }
    const headerParams = {
    }
    const formParams = {
    }

    const authNames = ['OAuth2AuthenticationCodeFlow']
    const contentTypes = []
    const accepts = ['text/xml']
    const returnType = 'String'
    return this.apiClient.callApi(
      '/c/{company_id}/issued_documents/{document_id}/e_invoice/xml', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Get E-Invoice XML
     * Downloads the e-invoice in XML format.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeAttachment Include the attachment to the XML e-invoice.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
  getEInvoiceXml (companyId, documentId, opts) {
    return this.getEInvoiceXmlWithHttpInfo(companyId, documentId, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Send E-Invoice
     * Sends the e-invoice to SDI.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/SendEInvoiceRequest} [sendEInvoiceRequest]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendEInvoiceResponse} and HTTP response
     */
  sendEInvoiceWithHttpInfo (companyId, documentId, opts) {
    opts = opts || {}
    const postBody = opts.sendEInvoiceRequest
    // verify the required parameter 'companyId' is set
    if (companyId === undefined || companyId === null) {
      throw new Error("Missing the required parameter 'companyId' when calling sendEInvoice")
    }
    // verify the required parameter 'documentId' is set
    if (documentId === undefined || documentId === null) {
      throw new Error("Missing the required parameter 'documentId' when calling sendEInvoice")
    }

    const pathParams = {
      company_id: companyId,
      document_id: documentId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const authNames = ['OAuth2AuthenticationCodeFlow']
    const contentTypes = ['application/json']
    const accepts = ['application/json']
    const returnType = SendEInvoiceResponse
    return this.apiClient.callApi(
      '/c/{company_id}/issued_documents/{document_id}/e_invoice/send', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Send E-Invoice
     * Sends the e-invoice to SDI.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/SendEInvoiceRequest} opts.sendEInvoiceRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendEInvoiceResponse}
     */
  sendEInvoice (companyId, documentId, opts) {
    return this.sendEInvoiceWithHttpInfo(companyId, documentId, opts)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }

  /**
     * Verify E-Invoice XML
     * Verifies the e-invoice XML format. Checks if all of the mandatory fields are filled and compliant to the right format.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyEInvoiceXmlResponse} and HTTP response
     */
  verifyEInvoiceXmlWithHttpInfo (companyId, documentId) {
    const postBody = null
    // verify the required parameter 'companyId' is set
    if (companyId === undefined || companyId === null) {
      throw new Error("Missing the required parameter 'companyId' when calling verifyEInvoiceXml")
    }
    // verify the required parameter 'documentId' is set
    if (documentId === undefined || documentId === null) {
      throw new Error("Missing the required parameter 'documentId' when calling verifyEInvoiceXml")
    }

    const pathParams = {
      company_id: companyId,
      document_id: documentId
    }
    const queryParams = {
    }
    const headerParams = {
    }
    const formParams = {
    }

    const authNames = ['OAuth2AuthenticationCodeFlow']
    const contentTypes = []
    const accepts = ['application/json']
    const returnType = VerifyEInvoiceXmlResponse
    return this.apiClient.callApi(
      '/c/{company_id}/issued_documents/{document_id}/e_invoice/xml_verify', 'GET',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null
    )
  }

  /**
     * Verify E-Invoice XML
     * Verifies the e-invoice XML format. Checks if all of the mandatory fields are filled and compliant to the right format.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyEInvoiceXmlResponse}
     */
  verifyEInvoiceXml (companyId, documentId) {
    return this.verifyEInvoiceXmlWithHttpInfo(companyId, documentId)
      .then(function (response_and_data) {
        return response_and_data.data
      })
  }
}
