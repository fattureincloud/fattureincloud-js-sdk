/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCashbookEntryRequest from '../model/CreateCashbookEntryRequest';
import CreateCashbookEntryResponse from '../model/CreateCashbookEntryResponse';
import GetCashbookEntryResponse from '../model/GetCashbookEntryResponse';
import ListCashbookEntriesResponse from '../model/ListCashbookEntriesResponse';
import ModifyCashbookEntryRequest from '../model/ModifyCashbookEntryRequest';
import ModifyCashbookEntryResponse from '../model/ModifyCashbookEntryResponse';

/**
* Cashbook service.
* @module api/CashbookApi
* @version 2.0.3
*/
export default class CashbookApi {

    /**
    * Constructs a new CashbookApi. 
    * @alias module:api/CashbookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Cashbook Entry
     * Creates a new cashbook entry.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCashbookEntryRequest} opts.CreateCashbookEntryRequest Cashbook entry. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateCashbookEntryResponse} and HTTP response
     */
    createCashbookEntryWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = opts['CreateCashbookEntryRequest'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling createCashbookEntry");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCashbookEntryResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/cashbook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Cashbook Entry
     * Creates a new cashbook entry.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCashbookEntryRequest} opts.CreateCashbookEntryRequest Cashbook entry. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateCashbookEntryResponse}
     */
    createCashbookEntry(company_id, opts) {
      return this.createCashbookEntryWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Cashbook Entry
     * Deletes the specified cashbook entry.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteCashbookEntryWithHttpInfo(company_id, document_id) {
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling deleteCashbookEntry");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling deleteCashbookEntry");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/cashbook/{document_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Cashbook Entry
     * Deletes the specified cashbook entry.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteCashbookEntry(company_id, document_id) {
      return this.deleteCashbookEntryWithHttpInfo(company_id, document_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Cashbook Entry
     * Gets the specified cashbook entry.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetCashbookEntryResponse} and HTTP response
     */
    getCashbookEntryWithHttpInfo(company_id, document_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling getCashbookEntry");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling getCashbookEntry");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCashbookEntryResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/cashbook/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Cashbook Entry
     * Gets the specified cashbook entry.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetCashbookEntryResponse}
     */
    getCashbookEntry(company_id, document_id, opts) {
      return this.getCashbookEntryWithHttpInfo(company_id, document_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Cashbook Entries
     * Lists the cashbook entries.
     * @param {Number} company_id The ID of the company.
     * @param {String} date_from Start date.
     * @param {String} date_to End date.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.year Filter cashbook by year.
     * @param {module:model/String} opts.type Filter cashbook by type.
     * @param {Number} opts.payment_account_id Filter by payment account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListCashbookEntriesResponse} and HTTP response
     */
    listCashbookEntriesWithHttpInfo(company_id, date_from, date_to, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling listCashbookEntries");
      }
      // verify the required parameter 'date_from' is set
      if (date_from === undefined || date_from === null) {
        throw new Error("Missing the required parameter 'date_from' when calling listCashbookEntries");
      }
      // verify the required parameter 'date_to' is set
      if (date_to === undefined || date_to === null) {
        throw new Error("Missing the required parameter 'date_to' when calling listCashbookEntries");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
        'date_from': date_from,
        'date_to': date_to,
        'year': opts['year'],
        'type': opts['type'],
        'payment_account_id': opts['payment_account_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCashbookEntriesResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/cashbook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Cashbook Entries
     * Lists the cashbook entries.
     * @param {Number} company_id The ID of the company.
     * @param {String} date_from Start date.
     * @param {String} date_to End date.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.year Filter cashbook by year.
     * @param {module:model/String} opts.type Filter cashbook by type.
     * @param {Number} opts.payment_account_id Filter by payment account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListCashbookEntriesResponse}
     */
    listCashbookEntries(company_id, date_from, date_to, opts) {
      return this.listCashbookEntriesWithHttpInfo(company_id, date_from, date_to, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify Cashbook Entry
     * Modifies the specified cashbook entry.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyCashbookEntryRequest} opts.ModifyCashbookEntryRequest Cashbook Entry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyCashbookEntryResponse} and HTTP response
     */
    modifyCashbookEntryWithHttpInfo(company_id, document_id, opts) {
      opts = opts || {};
      let postBody = opts['ModifyCashbookEntryRequest'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling modifyCashbookEntry");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling modifyCashbookEntry");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifyCashbookEntryResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/cashbook/{document_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Modify Cashbook Entry
     * Modifies the specified cashbook entry.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyCashbookEntryRequest} opts.ModifyCashbookEntryRequest Cashbook Entry
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyCashbookEntryResponse}
     */
    modifyCashbookEntry(company_id, document_id, opts) {
      return this.modifyCashbookEntryWithHttpInfo(company_id, document_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
