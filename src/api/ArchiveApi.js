/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateArchiveDocumentRequest from '../model/CreateArchiveDocumentRequest';
import CreateArchiveDocumentResponse from '../model/CreateArchiveDocumentResponse';
import GetArchiveDocumentResponse from '../model/GetArchiveDocumentResponse';
import ListArchiveDocumentsResponse from '../model/ListArchiveDocumentsResponse';
import ModifyArchiveDocumentRequest from '../model/ModifyArchiveDocumentRequest';
import ModifyArchiveDocumentResponse from '../model/ModifyArchiveDocumentResponse';
import UploadArchiveAttachmentResponse from '../model/UploadArchiveAttachmentResponse';

/**
* Archive service.
* @module api/ArchiveApi
* @version 2.0.3
*/
export default class ArchiveApi {

    /**
    * Constructs a new ArchiveApi. 
    * @alias module:api/ArchiveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createArchiveDocument operation.
     * @callback module:api/ArchiveApi~createArchiveDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateArchiveDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Archive Document
     * Creates a new archive document.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateArchiveDocumentRequest} opts.createArchiveDocumentRequest The Archive Document.
     * @param {module:api/ArchiveApi~createArchiveDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateArchiveDocumentResponse}
     */
    createArchiveDocument(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createArchiveDocumentRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createArchiveDocument");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateArchiveDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteArchiveDocument operation.
     * @callback module:api/ArchiveApi~deleteArchiveDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Archive Document
     * Deletes the specified archive document.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {module:api/ArchiveApi~deleteArchiveDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteArchiveDocument(companyId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteArchiveDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteArchiveDocument");
      }

      let pathParams = {
        'company_id': companyId,
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/archive/{document_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchiveDocument operation.
     * @callback module:api/ArchiveApi~getArchiveDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetArchiveDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Archive Document
     * Gets the specified archive document.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {module:api/ArchiveApi~getArchiveDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetArchiveDocumentResponse}
     */
    getArchiveDocument(companyId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getArchiveDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getArchiveDocument");
      }

      let pathParams = {
        'company_id': companyId,
        'document_id': documentId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = GetArchiveDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listArchiveDocuments operation.
     * @callback module:api/ArchiveApi~listArchiveDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListArchiveDocumentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Archive Documents
     * Lists the archive documents.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.perPage The size of the page. (default to 5)
     * @param {module:api/ArchiveApi~listArchiveDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListArchiveDocumentsResponse}
     */
    listArchiveDocuments(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listArchiveDocuments");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListArchiveDocumentsResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyArchiveDocument operation.
     * @callback module:api/ArchiveApi~modifyArchiveDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyArchiveDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Archive Document
     * Modifies the specified archive document.
     * @param {Number} companyId The ID of the company.
     * @param {Number} documentId The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyArchiveDocumentRequest} opts.modifyArchiveDocumentRequest Modified Archive Document
     * @param {module:api/ArchiveApi~modifyArchiveDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyArchiveDocumentResponse}
     */
    modifyArchiveDocument(companyId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyArchiveDocumentRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyArchiveDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling modifyArchiveDocument");
      }

      let pathParams = {
        'company_id': companyId,
        'document_id': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifyArchiveDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive/{document_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadArchiveDocumentAttachment operation.
     * @callback module:api/ArchiveApi~uploadArchiveDocumentAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadArchiveAttachmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Archive Document Attachment
     * Uploads an attachment destined to an archive document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename Name of the file.
     * @param {File} opts.attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @param {module:api/ArchiveApi~uploadArchiveDocumentAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadArchiveAttachmentResponse}
     */
    uploadArchiveDocumentAttachment(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling uploadArchiveDocumentAttachment");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filename': opts['filename'],
        'attachment': opts['attachment']
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UploadArchiveAttachmentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive/attachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
