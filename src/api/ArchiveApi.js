/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateArchiveDocumentRequest from '../model/CreateArchiveDocumentRequest';
import CreateArchiveDocumentResponse from '../model/CreateArchiveDocumentResponse';
import GetArchiveDocumentResponse from '../model/GetArchiveDocumentResponse';
import ListArchiveDocumentsResponse from '../model/ListArchiveDocumentsResponse';
import ModifyArchiveDocumentRequest from '../model/ModifyArchiveDocumentRequest';
import ModifyArchiveDocumentResponse from '../model/ModifyArchiveDocumentResponse';
import UploadArchiveAttachmentResponse from '../model/UploadArchiveAttachmentResponse';

/**
* Archive service.
* @module api/ArchiveApi
* @version 2.0.3
*/
export default class ArchiveApi {

    /**
    * Constructs a new ArchiveApi. 
    * @alias module:api/ArchiveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Archive Document
     * Creates a new archive document.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateArchiveDocumentRequest} opts.CreateArchiveDocumentRequest The Archive Document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateArchiveDocumentResponse} and HTTP response
     */
    createArchiveDocumentWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = opts['CreateArchiveDocumentRequest'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling createArchiveDocument");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateArchiveDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Archive Document
     * Creates a new archive document.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateArchiveDocumentRequest} opts.CreateArchiveDocumentRequest The Archive Document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateArchiveDocumentResponse}
     */
    createArchiveDocument(company_id, opts) {
      return this.createArchiveDocumentWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Archive Document
     * Deletes the specified archive document.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteArchiveDocumentWithHttpInfo(company_id, document_id) {
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling deleteArchiveDocument");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling deleteArchiveDocument");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/archive/{document_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Archive Document
     * Deletes the specified archive document.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteArchiveDocument(company_id, document_id) {
      return this.deleteArchiveDocumentWithHttpInfo(company_id, document_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Archive Document
     * Gets the specified archive document.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetArchiveDocumentResponse} and HTTP response
     */
    getArchiveDocumentWithHttpInfo(company_id, document_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling getArchiveDocument");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling getArchiveDocument");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = GetArchiveDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Archive Document
     * Gets the specified archive document.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetArchiveDocumentResponse}
     */
    getArchiveDocument(company_id, document_id, opts) {
      return this.getArchiveDocumentWithHttpInfo(company_id, document_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Archive Documents
     * Lists the archive documents.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.per_page The size of the page. (default to 5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListArchiveDocumentsResponse} and HTTP response
     */
    listArchiveDocumentsWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling listArchiveDocuments");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['per_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListArchiveDocumentsResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Archive Documents
     * Lists the archive documents.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.per_page The size of the page. (default to 5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListArchiveDocumentsResponse}
     */
    listArchiveDocuments(company_id, opts) {
      return this.listArchiveDocumentsWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify Archive Document
     * Modifies the specified archive document.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyArchiveDocumentRequest} opts.ModifyArchiveDocumentRequest Modified Archive Document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyArchiveDocumentResponse} and HTTP response
     */
    modifyArchiveDocumentWithHttpInfo(company_id, document_id, opts) {
      opts = opts || {};
      let postBody = opts['ModifyArchiveDocumentRequest'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling modifyArchiveDocument");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling modifyArchiveDocument");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifyArchiveDocumentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive/{document_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Modify Archive Document
     * Modifies the specified archive document.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyArchiveDocumentRequest} opts.ModifyArchiveDocumentRequest Modified Archive Document
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyArchiveDocumentResponse}
     */
    modifyArchiveDocument(company_id, document_id, opts) {
      return this.modifyArchiveDocumentWithHttpInfo(company_id, document_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload Archive Document Attachment
     * Uploads an attachment destined to an archive document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename Name of the file.
     * @param {File} opts.attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadArchiveAttachmentResponse} and HTTP response
     */
    uploadArchiveDocumentAttachmentWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling uploadArchiveDocumentAttachment");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filename': opts['filename'],
        'attachment': opts['attachment']
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UploadArchiveAttachmentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/archive/attachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload Archive Document Attachment
     * Uploads an attachment destined to an archive document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename Name of the file.
     * @param {File} opts.attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadArchiveAttachmentResponse}
     */
    uploadArchiveDocumentAttachment(company_id, opts) {
      return this.uploadArchiveDocumentAttachmentWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
