/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePaymentAccountRequest from '../model/CreatePaymentAccountRequest';
import CreatePaymentAccountResponse from '../model/CreatePaymentAccountResponse';
import CreatePaymentMethodRequest from '../model/CreatePaymentMethodRequest';
import CreatePaymentMethodResponse from '../model/CreatePaymentMethodResponse';
import GetPaymentAccountResponse from '../model/GetPaymentAccountResponse';
import GetPaymentMethodResponse from '../model/GetPaymentMethodResponse';
import ModifyPaymentAccountRequest from '../model/ModifyPaymentAccountRequest';
import ModifyPaymentAccountResponse from '../model/ModifyPaymentAccountResponse';
import ModifyPaymentMethodRequest from '../model/ModifyPaymentMethodRequest';
import ModifyPaymentMethodResponse from '../model/ModifyPaymentMethodResponse';

/**
* Settings service.
* @module api/SettingsApi
* @version 2.0.3
*/
export default class SettingsApi {

    /**
    * Constructs a new SettingsApi. 
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPaymentAccount operation.
     * @callback module:api/SettingsApi~createPaymentAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Payment Account
     * Creates a new payment account.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentAccountRequest} opts.createPaymentAccountRequest 
     * @param {module:api/SettingsApi~createPaymentAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentAccountResponse}
     */
    createPaymentAccount(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createPaymentAccountRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createPaymentAccount");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentAccountResponse;
      return this.apiClient.callApi(
        '/c/{companyId}/settings/payment_accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPaymentMethod operation.
     * @callback module:api/SettingsApi~createPaymentMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentMethodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Payment Method
     * Creates a new payment method.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentMethodRequest} opts.createPaymentMethodRequest 
     * @param {module:api/SettingsApi~createPaymentMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentMethodResponse}
     */
    createPaymentMethod(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['createPaymentMethodRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createPaymentMethod");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentMethodResponse;
      return this.apiClient.callApi(
        '/c/{companyId}/settings/payment_methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePaymentAccount operation.
     * @callback module:api/SettingsApi~deletePaymentAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Payment Account
     * Deletes the specified payment account.
     * @param {Number} companyId The ID of the company.
     * @param {String} paymentAccountId The Referred Payment Account Id.
     * @param {module:api/SettingsApi~deletePaymentAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePaymentAccount(companyId, paymentAccountId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deletePaymentAccount");
      }
      // verify the required parameter 'paymentAccountId' is set
      if (paymentAccountId === undefined || paymentAccountId === null) {
        throw new Error("Missing the required parameter 'paymentAccountId' when calling deletePaymentAccount");
      }

      let pathParams = {
        'company_id': companyId,
        'paymentAccountId': paymentAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{companyId}/settings/payment_accounts/{paymentAccountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePaymentMethod operation.
     * @callback module:api/SettingsApi~deletePaymentMethodCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Payment Method
     * Deletes the specified payment method.
     * @param {Number} companyId The ID of the company.
     * @param {Number} paymentMethodId The Referred Payment Method Id.
     * @param {module:api/SettingsApi~deletePaymentMethodCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePaymentMethod(companyId, paymentMethodId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deletePaymentMethod");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling deletePaymentMethod");
      }

      let pathParams = {
        'company_id': companyId,
        'paymentMethodId': paymentMethodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{companyId}/settings/payment_method/{paymentMethodId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentAccount operation.
     * @callback module:api/SettingsApi~getPaymentAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPaymentAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Payment Account
     * Gets the specified payment account.
     * @param {Number} companyId The ID of the company.
     * @param {String} paymentAccountId The Referred Payment Account Id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {Object.<String, Object>} opts.body 
     * @param {module:api/SettingsApi~getPaymentAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPaymentAccountResponse}
     */
    getPaymentAccount(companyId, paymentAccountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getPaymentAccount");
      }
      // verify the required parameter 'paymentAccountId' is set
      if (paymentAccountId === undefined || paymentAccountId === null) {
        throw new Error("Missing the required parameter 'paymentAccountId' when calling getPaymentAccount");
      }

      let pathParams = {
        'company_id': companyId,
        'paymentAccountId': paymentAccountId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPaymentAccountResponse;
      return this.apiClient.callApi(
        '/c/{companyId}/settings/payment_accounts/{paymentAccountId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPaymentMethod operation.
     * @callback module:api/SettingsApi~getPaymentMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPaymentMethodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Payment Method
     * Gets the specified payment method.
     * @param {Number} companyId The ID of the company.
     * @param {Number} paymentMethodId The Referred Payment Method Id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {module:api/SettingsApi~getPaymentMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPaymentMethodResponse}
     */
    getPaymentMethod(companyId, paymentMethodId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getPaymentMethod");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling getPaymentMethod");
      }

      let pathParams = {
        'company_id': companyId,
        'paymentMethodId': paymentMethodId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPaymentMethodResponse;
      return this.apiClient.callApi(
        '/c/{companyId}/settings/payment_method/{paymentMethodId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyPaymentAccount operation.
     * @callback module:api/SettingsApi~modifyPaymentAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyPaymentAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Payment Account
     * Modifies the specified payment account.
     * @param {Number} companyId The ID of the company.
     * @param {String} paymentAccountId The Referred Payment Account Id.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyPaymentAccountRequest} opts.modifyPaymentAccountRequest 
     * @param {module:api/SettingsApi~modifyPaymentAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyPaymentAccountResponse}
     */
    modifyPaymentAccount(companyId, paymentAccountId, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyPaymentAccountRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyPaymentAccount");
      }
      // verify the required parameter 'paymentAccountId' is set
      if (paymentAccountId === undefined || paymentAccountId === null) {
        throw new Error("Missing the required parameter 'paymentAccountId' when calling modifyPaymentAccount");
      }

      let pathParams = {
        'company_id': companyId,
        'paymentAccountId': paymentAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifyPaymentAccountResponse;
      return this.apiClient.callApi(
        '/c/{companyId}/settings/payment_accounts/{paymentAccountId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyPaymentMethod operation.
     * @callback module:api/SettingsApi~modifyPaymentMethodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyPaymentMethodResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify Payment Method
     * Modifies the specified payment method.
     * @param {Number} companyId The ID of the company.
     * @param {Number} paymentMethodId The Referred Payment Method Id.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyPaymentMethodRequest} opts.modifyPaymentMethodRequest 
     * @param {module:api/SettingsApi~modifyPaymentMethodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyPaymentMethodResponse}
     */
    modifyPaymentMethod(companyId, paymentMethodId, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyPaymentMethodRequest'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling modifyPaymentMethod");
      }
      // verify the required parameter 'paymentMethodId' is set
      if (paymentMethodId === undefined || paymentMethodId === null) {
        throw new Error("Missing the required parameter 'paymentMethodId' when calling modifyPaymentMethod");
      }

      let pathParams = {
        'company_id': companyId,
        'paymentMethodId': paymentMethodId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifyPaymentMethodResponse;
      return this.apiClient.callApi(
        '/c/{companyId}/settings/payment_method/{paymentMethodId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
