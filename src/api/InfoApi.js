/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.  For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListArchiveCategoriesResponse from '../model/ListArchiveCategoriesResponse';
import ListCitiesResponse from '../model/ListCitiesResponse';
import ListCostCentersResponse from '../model/ListCostCentersResponse';
import ListCountriesResponse from '../model/ListCountriesResponse';
import ListCurrenciesResponse from '../model/ListCurrenciesResponse';
import ListDeliveryNotesDefaultCausalsResponse from '../model/ListDeliveryNotesDefaultCausalsResponse';
import ListLanguagesResponse from '../model/ListLanguagesResponse';
import ListPaymentAccountsResponse from '../model/ListPaymentAccountsResponse';
import ListPaymentMethodsResponse from '../model/ListPaymentMethodsResponse';
import ListProductCategoriesResponse from '../model/ListProductCategoriesResponse';
import ListReceivedDocumentCategoriesResponse from '../model/ListReceivedDocumentCategoriesResponse';
import ListRevenueCentersResponse from '../model/ListRevenueCentersResponse';
import ListTemplatesResponse from '../model/ListTemplatesResponse';
import ListUnitsOfMeasureResponse from '../model/ListUnitsOfMeasureResponse';
import ListVatTypesResponse from '../model/ListVatTypesResponse';

/**
* Info service.
* @module api/InfoApi
* @version 2.0.1
*/
export default class InfoApi {

    /**
    * Constructs a new InfoApi. 
    * @alias module:api/InfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listArchiveCategories operation.
     * @callback module:api/InfoApi~listArchiveCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListArchiveCategoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Archive Categories
     * Lists the archive categories.
     * @param {Number} companyId The ID of the company.
     * @param {module:api/InfoApi~listArchiveCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListArchiveCategoriesResponse}
     */
    listArchiveCategories(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listArchiveCategories");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListArchiveCategoriesResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/info/archive_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCities operation.
     * @callback module:api/InfoApi~listCitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Cities
     * Lists the Italian cities.
     * @param {Object} opts Optional parameters
     * @param {String} opts.postalCode Postal code for filtering.
     * @param {String} opts.city City for filtering (ignored if postal_code is passed).
     * @param {module:api/InfoApi~listCitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCitiesResponse}
     */
    listCities(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'postal_code': opts['postalCode'],
        'city': opts['city']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCitiesResponse;
      return this.apiClient.callApi(
        '/info/cities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCostCenters operation.
     * @callback module:api/InfoApi~listCostCentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCostCentersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Cost Centers
     * Lists the cost centers.
     * @param {Number} companyId The ID of the company.
     * @param {module:api/InfoApi~listCostCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCostCentersResponse}
     */
    listCostCenters(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listCostCenters");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCostCentersResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/info/cost_centers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCountries operation.
     * @callback module:api/InfoApi~listCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCountriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Countries
     * Lists the supported countries.
     * @param {module:api/InfoApi~listCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCountriesResponse}
     */
    listCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCountriesResponse;
      return this.apiClient.callApi(
        '/info/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCurrencies operation.
     * @callback module:api/InfoApi~listCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCurrenciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Currencies
     * Lists the supported currencies.
     * @param {module:api/InfoApi~listCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCurrenciesResponse}
     */
    listCurrencies(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCurrenciesResponse;
      return this.apiClient.callApi(
        '/info/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeliveryNotesDefaultCausals operation.
     * @callback module:api/InfoApi~listDeliveryNotesDefaultCausalsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeliveryNotesDefaultCausalsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Delivery Notes Default Causals
     * Lists the delivery note default causals.
     * @param {module:api/InfoApi~listDeliveryNotesDefaultCausalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeliveryNotesDefaultCausalsResponse}
     */
    listDeliveryNotesDefaultCausals(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDeliveryNotesDefaultCausalsResponse;
      return this.apiClient.callApi(
        '/info/dn_causals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLanguages operation.
     * @callback module:api/InfoApi~listLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLanguagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Languages
     * Lists the supported languages.
     * @param {module:api/InfoApi~listLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLanguagesResponse}
     */
    listLanguages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLanguagesResponse;
      return this.apiClient.callApi(
        '/info/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPaymentAccounts operation.
     * @callback module:api/InfoApi~listPaymentAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPaymentAccountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Payment Accounts
     * Lists the available payment accounts.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {module:api/InfoApi~listPaymentAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPaymentAccountsResponse}
     */
    listPaymentAccounts(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listPaymentAccounts");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentAccountsResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/info/payment_accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPaymentMethods operation.
     * @callback module:api/InfoApi~listPaymentMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPaymentMethodsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Payment Methods
     * Lists the available payment methods.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {module:api/InfoApi~listPaymentMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPaymentMethodsResponse}
     */
    listPaymentMethods(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listPaymentMethods");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentMethodsResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/info/payment_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProductCategories operation.
     * @callback module:api/InfoApi~listProductCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProductCategoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Product Categories
     * Lists the product categories.
     * @param {Number} companyId The ID of the company.
     * @param {module:model/String} context 
     * @param {module:api/InfoApi~listProductCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProductCategoriesResponse}
     */
    listProductCategories(companyId, context, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listProductCategories");
      }
      // verify the required parameter 'context' is set
      if (context === undefined || context === null) {
        throw new Error("Missing the required parameter 'context' when calling listProductCategories");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
        'context': context
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProductCategoriesResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/info/product_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReceivedDocumentCategories operation.
     * @callback module:api/InfoApi~listReceivedDocumentCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReceivedDocumentCategoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Received Document Categories
     * Lists the received document categories.
     * @param {Number} companyId The ID of the company.
     * @param {module:api/InfoApi~listReceivedDocumentCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReceivedDocumentCategoriesResponse}
     */
    listReceivedDocumentCategories(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listReceivedDocumentCategories");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListReceivedDocumentCategoriesResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/info/received_document_categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRevenueCenters operation.
     * @callback module:api/InfoApi~listRevenueCentersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRevenueCentersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Revenue Centers
     * Lists the revenue centers.
     * @param {Number} companyId The ID of the company.
     * @param {module:api/InfoApi~listRevenueCentersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRevenueCentersResponse}
     */
    listRevenueCenters(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listRevenueCenters");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRevenueCentersResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/info/revenue_centers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTemplates operation.
     * @callback module:api/InfoApi~listTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Templates
     * Lists the available templates.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type Type of the templates. (default to 'all')
     * @param {Boolean} opts.byType [Only if type=all] If true, splits the list in objects, grouping templates by type. (default to false)
     * @param {module:api/InfoApi~listTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTemplatesResponse}
     */
    listTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'by_type': opts['byType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTemplatesResponse;
      return this.apiClient.callApi(
        '/info/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUnitsOfMeasure operation.
     * @callback module:api/InfoApi~listUnitsOfMeasureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUnitsOfMeasureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Units of Measure
     * Lists the units of measure.
     * @param {module:api/InfoApi~listUnitsOfMeasureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUnitsOfMeasureResponse}
     */
    listUnitsOfMeasure(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUnitsOfMeasureResponse;
      return this.apiClient.callApi(
        '/info/measures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVatTypes operation.
     * @callback module:api/InfoApi~listVatTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVatTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Vat Types
     * Lists the available vat types.
     * @param {Number} companyId The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {module:api/InfoApi~listVatTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVatTypesResponse}
     */
    listVatTypes(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling listVatTypes");
      }

      let pathParams = {
        'company_id': companyId
      };
      let queryParams = {
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVatTypesResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/info/vat_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
