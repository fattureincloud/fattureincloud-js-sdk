/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateProductRequest from '../model/CreateProductRequest';
import CreateProductResponse from '../model/CreateProductResponse';
import GetProductResponse from '../model/GetProductResponse';
import ListProductsResponse from '../model/ListProductsResponse';
import ModifyProductRequest from '../model/ModifyProductRequest';
import ModifyProductResponse from '../model/ModifyProductResponse';

/**
* Products service.
* @module api/ProductsApi
* @version 2.0.3
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Product
     * Creates a new product.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateProductRequest} opts.CreateProductRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateProductResponse} and HTTP response
     */
    createProductWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = opts['CreateProductRequest'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling createProduct");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProductResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Product
     * Creates a new product.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateProductRequest} opts.CreateProductRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateProductResponse}
     */
    createProduct(company_id, opts) {
      return this.createProductWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Product
     * Deletes the specified product.
     * @param {Number} company_id The ID of the company.
     * @param {Number} product_id The ID of the product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductWithHttpInfo(company_id, product_id) {
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling deleteProduct");
      }
      // verify the required parameter 'product_id' is set
      if (product_id === undefined || product_id === null) {
        throw new Error("Missing the required parameter 'product_id' when calling deleteProduct");
      }

      let pathParams = {
        'company_id': company_id,
        'product_id': product_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/products/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Product
     * Deletes the specified product.
     * @param {Number} company_id The ID of the company.
     * @param {Number} product_id The ID of the product.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProduct(company_id, product_id) {
      return this.deleteProductWithHttpInfo(company_id, product_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Product
     * Gets the specified product.
     * @param {Number} company_id The ID of the company.
     * @param {Number} product_id The ID of the product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetProductResponse} and HTTP response
     */
    getProductWithHttpInfo(company_id, product_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling getProduct");
      }
      // verify the required parameter 'product_id' is set
      if (product_id === undefined || product_id === null) {
        throw new Error("Missing the required parameter 'product_id' when calling getProduct");
      }

      let pathParams = {
        'company_id': company_id,
        'product_id': product_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProductResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/products/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Product
     * Gets the specified product.
     * @param {Number} company_id The ID of the company.
     * @param {Number} product_id The ID of the product.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetProductResponse}
     */
    getProduct(company_id, product_id, opts) {
      return this.getProductWithHttpInfo(company_id, product_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Products
     * Lists the products.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.per_page The size of the page. (default to 5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListProductsResponse} and HTTP response
     */
    listProductsWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling listProducts");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['per_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProductsResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Products
     * Lists the products.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.per_page The size of the page. (default to 5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListProductsResponse}
     */
    listProducts(company_id, opts) {
      return this.listProductsWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify Product
     * Modifies the specified product.
     * @param {Number} company_id The ID of the company.
     * @param {Number} product_id The ID of the product.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyProductRequest} opts.ModifyProductRequest Modified product details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyProductResponse} and HTTP response
     */
    modifyProductWithHttpInfo(company_id, product_id, opts) {
      opts = opts || {};
      let postBody = opts['ModifyProductRequest'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling modifyProduct");
      }
      // verify the required parameter 'product_id' is set
      if (product_id === undefined || product_id === null) {
        throw new Error("Missing the required parameter 'product_id' when calling modifyProduct");
      }

      let pathParams = {
        'company_id': company_id,
        'product_id': product_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifyProductResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/products/{product_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Modify Product
     * Modifies the specified product.
     * @param {Number} company_id The ID of the company.
     * @param {Number} product_id The ID of the product.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyProductRequest} opts.ModifyProductRequest Modified product details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyProductResponse}
     */
    modifyProduct(company_id, product_id, opts) {
      return this.modifyProductWithHttpInfo(company_id, product_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
