/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateF24Request from '../model/CreateF24Request';
import CreateF24Response from '../model/CreateF24Response';
import GetF24Response from '../model/GetF24Response';
import ListF24Response from '../model/ListF24Response';
import ModifyF24Request from '../model/ModifyF24Request';
import ModifyF24Response from '../model/ModifyF24Response';
import UploadF24AttachmentResponse from '../model/UploadF24AttachmentResponse';

/**
* Taxes service.
* @module api/TaxesApi
* @version 2.0.3
*/
export default class TaxesApi {

    /**
    * Constructs a new TaxesApi. 
    * @alias module:api/TaxesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create F24
     * Creates a new F24.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateF24Request} opts.CreateF24Request The F24 to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateF24Response} and HTTP response
     */
    createF24WithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = opts['CreateF24Request'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling createF24");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateF24Response;
      return this.apiClient.callApi(
        '/c/{company_id}/taxes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create F24
     * Creates a new F24.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateF24Request} opts.CreateF24Request The F24 to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateF24Response}
     */
    createF24(company_id, opts) {
      return this.createF24WithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete F24
     * Removes the specified F24.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteF24WithHttpInfo(company_id, document_id) {
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling deleteF24");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling deleteF24");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/taxes/{document_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete F24
     * Removes the specified F24.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteF24(company_id, document_id) {
      return this.deleteF24WithHttpInfo(company_id, document_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete F24 Attachment
     * Removes the attachment of the specified F24.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteF24AttachmentWithHttpInfo(company_id, document_id) {
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling deleteF24Attachment");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling deleteF24Attachment");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/c/{company_id}/taxes/{document_id}/attachment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete F24 Attachment
     * Removes the attachment of the specified F24.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteF24Attachment(company_id, document_id) {
      return this.deleteF24AttachmentWithHttpInfo(company_id, document_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get F24
     * Gets the specified F24.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetF24Response} and HTTP response
     */
    getF24WithHttpInfo(company_id, document_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling getF24");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling getF24");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetF24Response;
      return this.apiClient.callApi(
        '/c/{company_id}/taxes/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get F24
     * Gets the specified F24.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetF24Response}
     */
    getF24(company_id, document_id, opts) {
      return this.getF24WithHttpInfo(company_id, document_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List F24
     * Lists the F24s.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.per_page The size of the page. (default to 5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListF24Response} and HTTP response
     */
    listF24WithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling listF24");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
        'fields': opts['fields'],
        'fieldset': opts['fieldset'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['per_page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListF24Response;
      return this.apiClient.callApi(
        '/c/{company_id}/taxes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List F24
     * Lists the F24s.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields List of comma-separated fields.
     * @param {module:model/String} opts.fieldset Name of the fieldset.
     * @param {String} opts.sort List of comma-separated fields for result sorting (minus for desc sorting).
     * @param {Number} opts.page The page to retrieve. (default to 1)
     * @param {Number} opts.per_page The size of the page. (default to 5)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListF24Response}
     */
    listF24(company_id, opts) {
      return this.listF24WithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Modify F24
     * Modifies the specified F24.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyF24Request} opts.ModifyF24Request The F24
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ModifyF24Response} and HTTP response
     */
    modifyF24WithHttpInfo(company_id, document_id, opts) {
      opts = opts || {};
      let postBody = opts['ModifyF24Request'];
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling modifyF24");
      }
      // verify the required parameter 'document_id' is set
      if (document_id === undefined || document_id === null) {
        throw new Error("Missing the required parameter 'document_id' when calling modifyF24");
      }

      let pathParams = {
        'company_id': company_id,
        'document_id': document_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModifyF24Response;
      return this.apiClient.callApi(
        '/c/{company_id}/taxes/{document_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Modify F24
     * Modifies the specified F24.
     * @param {Number} company_id The ID of the company.
     * @param {Number} document_id The ID of the document.
     * @param {Object} opts Optional parameters
     * @param {module:model/ModifyF24Request} opts.ModifyF24Request The F24
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ModifyF24Response}
     */
    modifyF24(company_id, document_id, opts) {
      return this.modifyF24WithHttpInfo(company_id, document_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload F24 Attachment
     * Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename Name of the file.
     * @param {File} opts.attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UploadF24AttachmentResponse} and HTTP response
     */
    uploadF24AttachmentWithHttpInfo(company_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'company_id' is set
      if (company_id === undefined || company_id === null) {
        throw new Error("Missing the required parameter 'company_id' when calling uploadF24Attachment");
      }

      let pathParams = {
        'company_id': company_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filename': opts['filename'],
        'attachment': opts['attachment']
      };

      let authNames = ['OAuth2AuthenticationCodeFlow'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = UploadF24AttachmentResponse;
      return this.apiClient.callApi(
        '/c/{company_id}/taxes/attachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload F24 Attachment
     * Uploads an attachment destined to a F24. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param {Number} company_id The ID of the company.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filename Name of the file.
     * @param {File} opts.attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UploadF24AttachmentResponse}
     */
    uploadF24Attachment(company_id, opts) {
      return this.uploadF24AttachmentWithHttpInfo(company_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
