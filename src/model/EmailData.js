/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailDataDefaultSenderEmail from './EmailDataDefaultSenderEmail';
import EmailDataSenderEmailsList from './EmailDataSenderEmailsList';

/**
 * The EmailData model module.
 * @module model/EmailData
 * @version 2.0.3
 */
class EmailData {
    /**
     * Constructs a new <code>EmailData</code>.
     * Email
     * @alias module:model/EmailData
     * @param recipientEmail {String} Recipient's email
     * @param defaultSenderEmail {module:model/EmailDataDefaultSenderEmail} 
     * @param senderEmailsList {Array.<module:model/EmailDataSenderEmailsList>} List of all emails from which the document can be sent
     * @param ccEmail {String} By default is the logged company email. This is the email address to which a copy will be sent.
     * @param subject {String} Email subject
     * @param body {String} Email body
     * @param documentExists {Boolean} If the document is not a delivery note, this flag will be set to true
     * @param deliveryNoteExists {Boolean} If the document is a delivery note, this flag will be set to true
     * @param attachmentExists {Boolean} If the document has one or more attachments, this flag will be set to true
     * @param accompanyingInvoiceExists {Boolean} If an accompanying invoice exists, this flag will be set to true
     * @param defaultAttachPdf {Boolean} If a pdf is attached, this flag will be set to true
     */
    constructor(recipientEmail, defaultSenderEmail, senderEmailsList, ccEmail, subject, body, documentExists, deliveryNoteExists, attachmentExists, accompanyingInvoiceExists, defaultAttachPdf) { 
        
        EmailData.initialize(this, recipientEmail, defaultSenderEmail, senderEmailsList, ccEmail, subject, body, documentExists, deliveryNoteExists, attachmentExists, accompanyingInvoiceExists, defaultAttachPdf);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, recipientEmail, defaultSenderEmail, senderEmailsList, ccEmail, subject, body, documentExists, deliveryNoteExists, attachmentExists, accompanyingInvoiceExists, defaultAttachPdf) { 
        obj['recipient_email'] = recipientEmail;
        obj['default_sender_email'] = defaultSenderEmail;
        obj['sender_emails_list'] = senderEmailsList;
        obj['cc_email'] = ccEmail;
        obj['subject'] = subject;
        obj['body'] = body;
        obj['document_exists'] = documentExists;
        obj['delivery_note_exists'] = deliveryNoteExists;
        obj['attachment_exists'] = attachmentExists;
        obj['accompanying_invoice_exists'] = accompanyingInvoiceExists;
        obj['default_attach_pdf'] = defaultAttachPdf;
    }

    /**
     * Constructs a <code>EmailData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailData} obj Optional instance to populate.
     * @return {module:model/EmailData} The populated <code>EmailData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailData();

            if (data.hasOwnProperty('recipient_email')) {
                obj['recipient_email'] = ApiClient.convertToType(data['recipient_email'], 'String');
            }
            if (data.hasOwnProperty('default_sender_email')) {
                obj['default_sender_email'] = EmailDataDefaultSenderEmail.constructFromObject(data['default_sender_email']);
            }
            if (data.hasOwnProperty('sender_emails_list')) {
                obj['sender_emails_list'] = ApiClient.convertToType(data['sender_emails_list'], [EmailDataSenderEmailsList]);
            }
            if (data.hasOwnProperty('cc_email')) {
                obj['cc_email'] = ApiClient.convertToType(data['cc_email'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('document_exists')) {
                obj['document_exists'] = ApiClient.convertToType(data['document_exists'], 'Boolean');
            }
            if (data.hasOwnProperty('delivery_note_exists')) {
                obj['delivery_note_exists'] = ApiClient.convertToType(data['delivery_note_exists'], 'Boolean');
            }
            if (data.hasOwnProperty('attachment_exists')) {
                obj['attachment_exists'] = ApiClient.convertToType(data['attachment_exists'], 'Boolean');
            }
            if (data.hasOwnProperty('accompanying_invoice_exists')) {
                obj['accompanying_invoice_exists'] = ApiClient.convertToType(data['accompanying_invoice_exists'], 'Boolean');
            }
            if (data.hasOwnProperty('default_attach_pdf')) {
                obj['default_attach_pdf'] = ApiClient.convertToType(data['default_attach_pdf'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Recipient's email
 * @member {String} recipient_email
 */
EmailData.prototype['recipient_email'] = undefined;

/**
 * @member {module:model/EmailDataDefaultSenderEmail} default_sender_email
 */
EmailData.prototype['default_sender_email'] = undefined;

/**
 * List of all emails from which the document can be sent
 * @member {Array.<module:model/EmailDataSenderEmailsList>} sender_emails_list
 */
EmailData.prototype['sender_emails_list'] = undefined;

/**
 * By default is the logged company email. This is the email address to which a copy will be sent.
 * @member {String} cc_email
 */
EmailData.prototype['cc_email'] = undefined;

/**
 * Email subject
 * @member {String} subject
 */
EmailData.prototype['subject'] = undefined;

/**
 * Email body
 * @member {String} body
 */
EmailData.prototype['body'] = undefined;

/**
 * If the document is not a delivery note, this flag will be set to true
 * @member {Boolean} document_exists
 */
EmailData.prototype['document_exists'] = undefined;

/**
 * If the document is a delivery note, this flag will be set to true
 * @member {Boolean} delivery_note_exists
 */
EmailData.prototype['delivery_note_exists'] = undefined;

/**
 * If the document has one or more attachments, this flag will be set to true
 * @member {Boolean} attachment_exists
 */
EmailData.prototype['attachment_exists'] = undefined;

/**
 * If an accompanying invoice exists, this flag will be set to true
 * @member {Boolean} accompanying_invoice_exists
 */
EmailData.prototype['accompanying_invoice_exists'] = undefined;

/**
 * If a pdf is attached, this flag will be set to true
 * @member {Boolean} default_attach_pdf
 */
EmailData.prototype['default_attach_pdf'] = undefined;






export default EmailData;

