/**
 * Fatture in Cloud API v2 - API Reference
 * ## Request informations In every request description you will be able to find some additional informations about context, permissions and supported functionality:  | Parameter | Description | |-----------|-------------| | üë• Context | Indicate the subject of the request. Can be `company`, `user` or `accountant`.  | | üîí Required scope | If present, indicates the required scope to fulfill the request. | | üîç Filtering | If present, indicates which fields support the filtering feature. | | ‚ÜïÔ∏è Sorting | If present, indicates which fields support the sorting feature. | | üìÑ Paginated results | If present, indicate that the results are paginated. | | üé© Customized responses supported | If present, indicate that you can use `field` or `fieldset` to customize the response body. |  For example the request `GET /entities/{entityRole}` have tis informations: \\ üë• Company context \\ üîí Required scope: `entity.clients:r` or `entity.suppliers:r` (depending on `entityRole`) \\ üîç Filtering: `id`, `name` \\ ‚ÜïÔ∏è Sorting: `id`, `name` \\ üìÑ Paginated results \\ üé© Customized responses supported  Keep in mind that if you are making **company realted requests**, you will need to specify the company id in the requests: ``` GET /c/{company_id}/issued_documents ```
 *
 * The version of the OpenAPI document: v2.0.0
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FattureInCloudApiV2ApiReference);
  }
}(this, function(expect, FattureInCloudApiV2ApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FattureInCloudApiV2ApiReference.CompanyInfoPlanInfoFunctions();
    instance.document_attachments = true;
    instance.archive = true;
    instance.payment_notifications = true;
    instance.paypal = true;
    instance.receipts = true;
    instance.e_invoice = true;
    instance.genius = true;
    instance.stock = true;
    instance.smtp = true;
    instance.mail_tracking = true;
    instance.subaccounts = true;
    instance.tessera_sanitaria = true;
    instance.recurring = true;
    instance.sofort = false;
    instance.cerved = true;
    instance.ts_digital = true;
    instance.ts_pay = true;
    instance.ts_invoice_trading = true;    
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CompanyInfoPlanInfoFunctions', function() {
    it('should create an instance of CompanyInfoPlanInfoFunctions', function() {
      expect(instance).to.be.a(FattureInCloudApiV2ApiReference.CompanyInfoPlanInfoFunctions);
    });

    it('should have the property archive (base name: "archive")', function() {
      expect(typeof instance.archive).to.be('boolean');
    });

    it('should have the property cerved (base name: "cerved")', function() {
      expect(typeof instance.cerved).to.be('boolean');
    });

    it('should have the property documentAttachments (base name: "document_attachments")', function() {
      expect(typeof instance.document_attachments).to.be('boolean');
    });

    it('should have the property eInvoice (base name: "e_invoice")', function() {
      expect(typeof instance.e_invoice).to.be('boolean');
    });

    it('should have the property genius (base name: "genius")', function() {
      expect(typeof instance.genius).to.be('boolean');
    });

    it('should have the property mailTracking (base name: "mail_tracking")', function() {
      expect(typeof instance.mail_tracking).to.be('boolean');
    });

    it('should have the property paymentNotifications (base name: "payment_notifications")', function() {
      expect(typeof instance.payment_notifications).to.be('boolean');
    });

    it('should have the property paypal (base name: "paypal")', function() {
      expect(typeof instance.paypal).to.be('boolean');
    });

    it('should have the property receipts (base name: "receipts")', function() {
      expect(typeof instance.receipts).to.be('boolean');
    });

    it('should have the property recurring (base name: "recurring")', function() {
      expect(typeof instance.recurring).to.be('boolean');
    });

    it('should have the property smtp (base name: "smtp")', function() {
      expect(typeof instance.smtp).to.be('boolean');
    });

    it('should have the property sofort (base name: "sofort")', function() {
      expect(typeof instance.sofort).to.be('boolean');
    });

    it('should have the property stock (base name: "stock")', function() {
      expect(typeof instance.stock).to.be('boolean');
    });

    it('should have the property subaccounts (base name: "subaccounts")', function() {
      expect(typeof instance.subaccounts).to.be('boolean');
    });

    it('should have the property tesseraSanitaria (base name: "tessera_sanitaria")', function() {
      expect(typeof instance.tessera_sanitaria).to.be('boolean');
    });

    it('should have the property tsDigital (base name: "ts_digital")', function() {
      expect(typeof instance.ts_digital).to.be('boolean');
    });

    it('should have the property tsInvoiceTrading (base name: "ts_invoice_trading")', function() {
      expect(typeof instance.ts_invoice_trading).to.be('boolean');
    });

    it('should have the property tsPay (base name: "ts_pay")', function() {
      expect(typeof instance.ts_pay).to.be('boolean');
    });

  });

}));
