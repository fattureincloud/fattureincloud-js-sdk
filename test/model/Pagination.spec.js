/**
 * Fatture in Cloud API v2 - API Reference
 * ## Request informations In every request description you will be able to find some additional informations about context, permissions and supported functionality:  | Parameter | Description | |-----------|-------------| | üë• Context | Indicate the subject of the request. Can be `company`, `user` or `accountant`.  | | üîí Required scope | If present, indicates the required scope to fulfill the request. | | üîç Filtering | If present, indicates which fields support the filtering feature. | | ‚ÜïÔ∏è Sorting | If present, indicates which fields support the sorting feature. | | üìÑ Paginated results | If present, indicate that the results are paginated. | | üé© Customized responses supported | If present, indicate that you can use `field` or `fieldset` to customize the response body. |  For example the request `GET /entities/{entityRole}` have tis informations: \\ üë• Company context \\ üîí Required scope: `entity.clients:r` or `entity.suppliers:r` (depending on `entityRole`) \\ üîç Filtering: `id`, `name` \\ ‚ÜïÔ∏è Sorting: `id`, `name` \\ üìÑ Paginated results \\ üé© Customized responses supported  Keep in mind that if you are making **company realted requests**, you will need to specify the company id in the requests: ``` GET /c/{company_id}/issued_documents ```
 *
 * The version of the OpenAPI document: v2.0.0
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FattureInCloudApiV2ApiReference);
  }
}(this, function(expect, FattureInCloudApiV2ApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FattureInCloudApiV2ApiReference.Pagination();
    instance.current_page = 2;
    instance.first_page_url = "page=1";
    instance.from = 1;
    instance.last_page = 3;
    instance.last_page_url = "page=3";
    instance.next_page_url = "page=3";
    instance.path = "/archive";
    instance.per_page = 50;
    instance.prev_page_url = "page=1";
    instance.to = 3;
    instance.total = 155;    
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Pagination', function() {
    it('should create an instance of Pagination', function() {
      expect(instance).to.be.a(FattureInCloudApiV2ApiReference.Pagination);
    });

    it('should have the property currentPage (base name: "current_page")', function() {
      expect(typeof instance.current_page).to.be('number');
    });

    it('should have the property firstPageUrl (base name: "first_page_url")', function() {
      expect(typeof instance.first_page_url).to.be('string');
    });

    it('should have the property from (base name: "from")', function() {
      expect(typeof instance.from).to.be('number');
    });

    it('should have the property lastPage (base name: "last_page")', function() {
      expect(typeof instance.last_page).to.be('number');
    });

    it('should have the property lastPageUrl (base name: "last_page_url")', function() {
      expect(typeof instance.last_page_url).to.be('string');
    });

    it('should have the property nextPageUrl (base name: "next_page_url")', function() {
      expect(typeof instance.next_page_url).to.be('string');
    });

    it('should have the property path (base name: "path")', function() {
      expect(typeof instance.path).to.be('string');
    });

    it('should have the property perPage (base name: "per_page")', function() {
      expect(typeof instance.per_page).to.be('number');
    });

    it('should have the property prevPageUrl (base name: "prev_page_url")', function() {
      expect(typeof instance.prev_page_url).to.be('string');
    });

    it('should have the property to (base name: "to")', function() {
      expect(typeof instance.to).to.be('number');
    });

    it('should have the property total (base name: "total")', function() {
      expect(typeof instance.total).to.be('number');
    });

  });

}));
