/**
 * Fatture in Cloud API v2 - API Reference
 * ## Request informations In every request description you will be able to find some additional informations about context, permissions and supported functionality:  | Parameter | Description | |-----------|-------------| | üë• Context | Indicate the subject of the request. Can be `company`, `user` or `accountant`.  | | üîí Required scope | If present, indicates the required scope to fulfill the request. | | üîç Filtering | If present, indicates which fields support the filtering feature. | | ‚ÜïÔ∏è Sorting | If present, indicates which fields support the sorting feature. | | üìÑ Paginated results | If present, indicate that the results are paginated. | | üé© Customized responses supported | If present, indicate that you can use `field` or `fieldset` to customize the response body. |  For example the request `GET /entities/{entityRole}` have tis informations: \\ üë• Company context \\ üîí Required scope: `entity.clients:r` or `entity.suppliers:r` (depending on `entityRole`) \\ üîç Filtering: `id`, `name` \\ ‚ÜïÔ∏è Sorting: `id`, `name` \\ üìÑ Paginated results \\ üé© Customized responses supported  Keep in mind that if you are making **company realted requests**, you will need to specify the company id in the requests: ``` GET /c/{company_id}/issued_documents ```
 *
 * The version of the OpenAPI document: v2.0.0
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FattureInCloudApiV2ApiReference);
  }
}(this, function(expect, FattureInCloudApiV2ApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FattureInCloudApiV2ApiReference.ReceivedDocumentItemsList();
    instance.id = 12345;
    instance.product_id = 54321;
    instance.code = "pdr01";
    instance.measure = "very big";
    instance.name = "prod uan";
    instance.net_price = 100;
    instance.category = "other";
    instance.qty = 1;
    instance.stock = 99;
    instance.vat = {
                    id : 1020,
                    value : 0,
                    description : "PA Non imp art. 2",
                    is_disabled : false
                }    
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReceivedDocumentItemsList', function() {
    it('should create an instance of ReceivedDocumentItemsList', function() {
      expect(instance).to.be.a(FattureInCloudApiV2ApiReference.ReceivedDocumentItemsList);
    });

    it('should have the property id (base name: "id")', function() {
      expect(typeof instance.id).to.be('number');
    });

    it('should have the property productId (base name: "product_id")', function() {
      expect(typeof instance.product_id).to.be('number');
    });

    it('should have the property code (base name: "code")', function() {
      expect(typeof instance.code).to.be('string');
    });

    it('should have the property name (base name: "name")', function() {
      expect(typeof instance.name).to.be('string');
    });

    it('should have the property measure (base name: "measure")', function() {
      expect(typeof instance.measure).to.be('string');
    });

    it('should have the property netPrice (base name: "net_price")', function() {
      expect(typeof instance.net_price).to.be('number');
    });

    it('should have the property category (base name: "category")', function() {
      expect(typeof instance.category).to.be('string');
    });

    it('should have the property qty (base name: "qty")', function() {
      expect(typeof instance.qty).to.be('number');
    });

    it('should have the property vat (base name: "vat")', function() {
      expect(typeof instance.vat).to.be('object');
    });

    it('should have the property stock (base name: "stock")', function() {
      expect(typeof instance.stock).to.be('number');
    });

  });

}));
