/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'))
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.fattureInCloudSdk)
  }
}(this, function (expect, fattureInCloudSdk) {
  'use strict'

  let instance

  beforeEach(function () {
    instance = new fattureInCloudSdk.ReceivedDocument()
    instance.id = 12345
    instance.type = 'expense'
    instance.description = 'Soggiorno di lavoro'
    instance.category = 'cat'
    instance.amortization = 1
    instance.rc_center = 'rcc'
    instance.invoice_number = 'inv12345'
    instance.is_marked = false
    instance.is_detailed = false
    instance.e_invoice = false
    instance.date = '2021-08-15'
    instance.next_due_date = '2021-08-15'
    instance.amount_net = 592
    instance.amount_vat = 0
    instance.amount_gross = 592
    instance.amount_withholding_tax = 0
    instance.amount_other_withholding_tax = 0
    instance.tax_deductibility = 50
    instance.vat_deductibility = 100
    instance.attachment_url = 'spesa_ger5i783t45hu6ti.pdf'
    instance.attachment_preview_url = '/preview.pdf'
    instance.entity = {
      id: 111,
      name: 'Hotel Rubino Palace'
    }
    instance.currency = {
      id: 'EUR',
      exchange_rate: '1.00000',
      symbol: 'â‚¬'
    }
    instance.payments_list = [
      {
        amount: 592,
        due_date: '2021-08-15',
        paid_date: '2021-08-15',
        id: 777,
        payment_terms: {
          days: 0,
          type: 'standard'
        },
        status: 'paid',
        payment_account: {
          id: 222,
          name: 'Contanti',
          virtual: false
        }
      }
    ]
    instance.items_list = [
      {
        id: 12345,
        product_id: 54321,
        code: 'pdr01',
        measure: 'very big',
        name: 'prod uan',
        net_price: 100,
        category: 'other',
        qty: 1,
        stock: 99,
        vat: {
          id: 1020,
          value: 0,
          description: 'PA Non imp art. 2',
          is_disabled: false
        }
      }]
    instance.attachment_token = 'sjfbisfb43t5y454y65uhete'
  })

  // const getProperty = function (object, getter, property) {
  //   // Use getter method if present; otherwise, get the property directly.
  //   if (typeof object[getter] === 'function') { return object[getter]() } else { return object[property] }
  // }

  // const setProperty = function (object, setter, property, value) {
  //   // Use setter method if present; otherwise, set the property directly.
  //   if (typeof object[setter] === 'function') { object[setter](value) } else { object[property] = value }
  // }

  describe('ReceivedDocument', function () {
    it('should create an instance of ReceivedDocument', function () {
      expect(instance).to.be.a(fattureInCloudSdk.ReceivedDocument)
    })

    it('should have the property id (base name: "id")', function () {
      expect(typeof instance.id).to.be('number')
    })

    it('should have the property type (base name: "type")', function () {
      expect(typeof instance.type).to.be('string')
    })

    it('should have the property entity (base name: "entity")', function () {
      expect(typeof instance.entity).to.be('object')
    })

    it('should have the property date (base name: "date")', function () {
      expect(typeof instance.date).to.be('string')
    })

    it('should have the property category (base name: "category")', function () {
      expect(typeof instance.category).to.be('string')
    })

    it('should have the property description (base name: "description")', function () {
      expect(typeof instance.description).to.be('string')
    })

    it('should have the property amountNet (base name: "amount_net")', function () {
      expect(typeof instance.amount_net).to.be('number')
    })

    it('should have the property amountVat (base name: "amount_vat")', function () {
      expect(typeof instance.amount_vat).to.be('number')
    })

    it('should have the property amountWithholdingTax (base name: "amount_withholding_tax")', function () {
      expect(typeof instance.amount_withholding_tax).to.be('number')
    })

    it('should have the property amountOtherWithholdingTax (base name: "amount_other_withholding_tax")', function () {
      expect(typeof instance.amount_other_withholding_tax).to.be('number')
    })

    it('should have the property amountGross (base name: "amount_gross")', function () {
      expect(typeof instance.amount_gross).to.be('number')
    })

    it('should have the property amortization (base name: "amortization")', function () {
      expect(typeof instance.amortization).to.be('number')
    })

    it('should have the property rcCenter (base name: "rc_center")', function () {
      expect(typeof instance.rc_center).to.be('string')
    })

    it('should have the property invoiceNumber (base name: "invoice_number")', function () {
      expect(typeof instance.invoice_number).to.be('string')
    })

    it('should have the property isMarked (base name: "is_marked")', function () {
      expect(typeof instance.is_marked).to.be('boolean')
    })

    it('should have the property isDetailed (base name: "is_detailed")', function () {
      expect(typeof instance.is_detailed).to.be('boolean')
    })

    it('should have the property eInvoice (base name: "e_invoice")', function () {
      expect(typeof instance.e_invoice).to.be('boolean')
    })

    it('should have the property nextDueDate (base name: "next_due_date")', function () {
      expect(typeof instance.next_due_date).to.be('string')
    })

    it('should have the property currency (base name: "currency")', function () {
      expect(typeof instance.currency).to.be('object')
    })

    it('should have the property taxDeductibility (base name: "tax_deductibility")', function () {
      expect(typeof instance.tax_deductibility).to.be('number')
    })

    it('should have the property vatDeductibility (base name: "vat_deductibility")', function () {
      expect(typeof instance.vat_deductibility).to.be('number')
    })

    it('should have the property itemsList (base name: "items_list")', function () {
      expect(typeof instance.items_list).to.be('object')
    })

    it('should have the property paymentsList (base name: "payments_list")', function () {
      expect(typeof instance.payments_list).to.be('object')
    })

    it('should have the property attachmentUrl (base name: "attachment_url")', function () {
      expect(typeof instance.attachment_url).to.be('string')
    })

    it('should have the property attachmentPreviewUrl (base name: "attachment_preview_url")', function () {
      expect(typeof instance.attachment_preview_url).to.be('string')
    })

    it('should have the property attachmentToken (base name: "attachment_token")', function () {
      expect(typeof instance.attachment_token).to.be('string')
    })
  })
}))
