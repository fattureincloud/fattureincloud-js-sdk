/**
 * Fatture in Cloud API v2 - API Reference
 * ## Request informations In every request description you will be able to find some additional informations about context, permissions and supported functionality:  | Parameter | Description | |-----------|-------------| | üë• Context | Indicate the subject of the request. Can be `company`, `user` or `accountant`.  | | üîí Required scope | If present, indicates the required scope to fulfill the request. | | üîç Filtering | If present, indicates which fields support the filtering feature. | | ‚ÜïÔ∏è Sorting | If present, indicates which fields support the sorting feature. | | üìÑ Paginated results | If present, indicate that the results are paginated. | | üé© Customized responses supported | If present, indicate that you can use `field` or `fieldset` to customize the response body. |  For example the request `GET /entities/{entityRole}` have tis informations: \\ üë• Company context \\ üîí Required scope: `entity.clients:r` or `entity.suppliers:r` (depending on `entityRole`) \\ üîç Filtering: `id`, `name` \\ ‚ÜïÔ∏è Sorting: `id`, `name` \\ üìÑ Paginated results \\ üé© Customized responses supported  Keep in mind that if you are making **company realted requests**, you will need to specify the company id in the requests: ``` GET /c/{company_id}/issued_documents ```
 *
 * The version of the OpenAPI document: v2.0.0
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FattureInCloudApiV2ApiReference);
  }
}(this, function(expect, FattureInCloudApiV2ApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FattureInCloudApiV2ApiReference.IssuedDocumentPreCreateInfoDefaultValues();
    instance.default_template = {
      id : 111,
      type : "standard",
      name : "Light Smoke"
      },
    instance.dn_template = {
          id : 222,
          type : "delivery_note",
          name : "DDT 1"
      },
    instance.ai_template = {
          id : 333,
          type : "accompanying_invoice",
          name : "FT Accompagnatoria 1"
      },
    instance.notes = "";
    instance.rivalsa = 0;
    instance.cassa = 0;
    instance.withholding_tax = 0;
    instance.withholding_tax_taxable = 100;
    instance.other_withholding_tax = 0;
    instance.use_gross_prices = false;
    instance.payment_method = {
        id : 123321,
        name : "Bonifico bancario",
        is_default : true,
        details : [
            {
            title : "Banca",
            description : "Indesa"
            },
            {
            title : "IBAN",
            description : "IT17QA12345600000003498936"
            },
            {
            title : "Intestatario",
            description : "Mario Rossi"
            }
          ]
      }
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IssuedDocumentPreCreateInfoDefaultValues', function() {
    it('should create an instance of IssuedDocumentPreCreateInfoDefaultValues', function() {
      expect(instance).to.be.a(FattureInCloudApiV2ApiReference.IssuedDocumentPreCreateInfoDefaultValues);
    });

    it('should have the property defaultTemplate (base name: "default_template")', function() {
      expect(typeof instance.default_template).to.be('object');
    });

    it('should have the property dnTemplate (base name: "dn_template")', function() {
      expect(typeof instance.dn_template).to.be('object');
    });

    it('should have the property aiTemplate (base name: "ai_template")', function() {
      expect(typeof instance.ai_template).to.be('object');
    });

    it('should have the property notes (base name: "notes")', function() {
      expect(typeof instance.notes).to.be('string');
    });

    it('should have the property rivalsa (base name: "rivalsa")', function() {
      expect(typeof instance.rivalsa).to.be('number');
    });

    it('should have the property cassa (base name: "cassa")', function() {
      expect(typeof instance.cassa).to.be('number');
    });

    it('should have the property withholdingTax (base name: "withholding_tax")', function() {
      expect(typeof instance.withholding_tax).to.be('number');
    });

    it('should have the property withholdingTaxTaxable (base name: "withholding_tax_taxable")', function() {
      expect(typeof instance.withholding_tax_taxable).to.be('number');
    });

    it('should have the property otherWithholdingTax (base name: "other_withholding_tax")', function() {
      expect(typeof instance.other_withholding_tax).to.be('number');
    });

    it('should have the property useGrossPrices (base name: "use_gross_prices")', function() {
      expect(typeof instance.use_gross_prices).to.be('boolean');
    });

    it('should have the property paymentMethod (base name: "payment_method")', function() {
      expect(typeof instance.payment_method).to.be('object');
    });

  });

}));
