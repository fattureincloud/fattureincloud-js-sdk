/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'))
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.fattureInCloudSdk)
  }
}(this, function (expect, fattureInCloudSdk) {
  'use strict'

  let instance

  beforeEach(function () {
    instance = new fattureInCloudSdk.Product()
    instance.id = 12345
    instance.name = 'Tavolo di marmo'
    instance.code = 'TAVOLO003'
    instance.net_price = 240
    instance.gross_price = 280
    instance.use_gross_price = false
    instance.net_cost = 0
    instance.measure = ''
    instance.description = 'Tavolo in marmo pregiato'
    instance.category = 'arredamento'
    instance.in_stock = true
    instance.notes = ''
    instance.stock_initial = 99
    instance.stock_current = 98
    instance.average_cost = 200
    instance.average_price = 300
    instance.created_at = '2021-10-10'
    instance.updated_at = ''
    instance.default_vat = {
      id: 3,
      value: 22,
      description: 'Non imponibile art. 123',
      notes: "IVA non imponibile ai sensi dell'articolo 123, comma 2",
      is_disabled: false
    }
  })

  // const getProperty = function (object, getter, property) {
  //   // Use getter method if present; otherwise, get the property directly.
  //   if (typeof object[getter] === 'function') { return object[getter]() } else { return object[property] }
  // }

  // const setProperty = function (object, setter, property, value) {
  //   // Use setter method if present; otherwise, set the property directly.
  //   if (typeof object[setter] === 'function') { object[setter](value) } else { object[property] = value }
  // }

  describe('Product', function () {
    it('should create an instance of Product', function () {
      expect(instance).to.be.a(fattureInCloudSdk.Product)
    })

    it('should have the property id (base name: "id")', function () {
      expect(typeof instance.id).to.be('number')
    })

    it('should have the property name (base name: "name")', function () {
      expect(typeof instance.name).to.be('string')
    })

    it('should have the property code (base name: "code")', function () {
      expect(typeof instance.code).to.be('string')
    })

    it('should have the property netPrice (base name: "net_price")', function () {
      expect(typeof instance.net_price).to.be('number')
    })

    it('should have the property grossPrice (base name: "gross_price")', function () {
      expect(typeof instance.gross_price).to.be('number')
    })

    it('should have the property useGrossPrice (base name: "use_gross_price")', function () {
      expect(typeof instance.use_gross_price).to.be('boolean')
    })

    it('should have the property defaultVat (base name: "default_vat")', function () {
      expect(typeof instance.default_vat).to.be('object')
    })

    it('should have the property netCost (base name: "net_cost")', function () {
      expect(typeof instance.net_cost).to.be('number')
    })

    it('should have the property measure (base name: "measure")', function () {
      expect(typeof instance.measure).to.be('string')
    })

    it('should have the property description (base name: "description")', function () {
      expect(typeof instance.description).to.be('string')
    })

    it('should have the property category (base name: "category")', function () {
      expect(typeof instance.category).to.be('string')
    })

    it('should have the property notes (base name: "notes")', function () {
      expect(typeof instance.notes).to.be('string')
    })

    it('should have the property inStock (base name: "in_stock")', function () {
      expect(typeof instance.in_stock).to.be('boolean')
    })

    it('should have the property stockInitial (base name: "stock_initial")', function () {
      expect(typeof instance.stock_initial).to.be('number')
    })

    it('should have the property stockCurrent (base name: "stock_current")', function () {
      expect(typeof instance.stock_current).to.be('number')
    })

    it('should have the property averageCost (base name: "average_cost")', function () {
      expect(typeof instance.average_cost).to.be('number')
    })

    it('should have the property averagePrice (base name: "average_price")', function () {
      expect(typeof instance.average_price).to.be('number')
    })

    it('should have the property createdAt (base name: "created_at")', function () {
      expect(typeof instance.created_at).to.be('string')
    })

    it('should have the property updatedAt (base name: "updated_at")', function () {
      expect(typeof instance.updated_at).to.be('string')
    })
  })
}))
