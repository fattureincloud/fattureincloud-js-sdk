/**
 * Fatture in Cloud API v2 - API Reference
 * ## Request informations In every request description you will be able to find some additional informations about context, permissions and supported functionality:  | Parameter | Description | |-----------|-------------| | üë• Context | Indicate the subject of the request. Can be `company`, `user` or `accountant`.  | | üîí Required scope | If present, indicates the required scope to fulfill the request. | | üîç Filtering | If present, indicates which fields support the filtering feature. | | ‚ÜïÔ∏è Sorting | If present, indicates which fields support the sorting feature. | | üìÑ Paginated results | If present, indicate that the results are paginated. | | üé© Customized responses supported | If present, indicate that you can use `field` or `fieldset` to customize the response body. |  For example the request `GET /entities/{entityRole}` have tis informations: \\ üë• Company context \\ üîí Required scope: `entity.clients:r` or `entity.suppliers:r` (depending on `entityRole`) \\ üîç Filtering: `id`, `name` \\ ‚ÜïÔ∏è Sorting: `id`, `name` \\ üìÑ Paginated results \\ üé© Customized responses supported  Keep in mind that if you are making **company realted requests**, you will need to specify the company id in the requests: ``` GET /c/{company_id}/issued_documents ```
 *
 * The version of the OpenAPI document: v2.0.0
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FattureInCloudApiV2ApiReference);
  }
}(this, function(expect, FattureInCloudApiV2ApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FattureInCloudApiV2ApiReference.Supplier();
    instance.id = 12345;
    instance.code = "AE86";
    instance.name = "Mario Rossi S.R.L.";
    instance.type = "company";
    instance.first_name = "Mario";
    instance.last_name = "Rossi";
    instance.contact_person = "";
    instance.vat_number = 111222333;
    instance.tax_code = "111122233";
    instance.address_street = "Corso Magellano 46";
    instance.address_postal_code = "20146";
    instance.address_city = "Milano";
    instance.address_province = "MI";
    instance.address_extra = "";
    instance.country = "Italia";
    instance.email = "mario.rossi@example.com";
    instance.certified_email = "mario.rossi@pec.example.com";
    instance.phone = "1234567890";
    instance.fax = "123456789";
    instance.notes = "";
    instance.created_at = "2021-15-08";
    instance.updated_at = "2021-15-08";    
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Supplier', function() {
    it('should create an instance of Supplier', function() {
      expect(instance).to.be.a(FattureInCloudApiV2ApiReference.Supplier);
    });

    it('should have the property id (base name: "id")', function() {
      expect(typeof instance.id).to.be('number');
    });

    it('should have the property code (base name: "code")', function() {
      expect(typeof instance.code).to.be('string');
    });

    it('should have the property name (base name: "name")', function() {
      expect(typeof instance.name).to.be('string');
    });

    it('should have the property type (base name: "type")', function() {
      expect(typeof instance.type).to.be('string');
    });

    it('should have the property firstName (base name: "first_name")', function() {
      expect(typeof instance.first_name).to.be('string');
    });

    it('should have the property lastName (base name: "last_name")', function() {
      expect(typeof instance.last_name).to.be('string');
    });

    it('should have the property contactPerson (base name: "contact_person")', function() {
      expect(typeof instance.contact_person).to.be('string');
    });

    it('should have the property vatNumber (base name: "vat_number")', function() {
      expect(typeof instance.vat_number).to.be('number');
    });

    it('should have the property taxCode (base name: "tax_code")', function() {
      expect(typeof instance.tax_code).to.be('string');
    });

    it('should have the property addressStreet (base name: "address_street")', function() {
      expect(typeof instance.address_street).to.be('string');
    });

    it('should have the property addressPostalCode (base name: "address_postal_code")', function() {
      expect(typeof instance.address_postal_code).to.be('string');
    });

    it('should have the property addressCity (base name: "address_city")', function() {
      expect(typeof instance.address_city).to.be('string');
    });

    it('should have the property addressProvince (base name: "address_province")', function() {
      expect(typeof instance.address_province).to.be('string');
    });

    it('should have the property addressExtra (base name: "address_extra")', function() {
      expect(typeof instance.address_extra).to.be('string');
    });

    it('should have the property country (base name: "country")', function() {
      expect(typeof instance.country).to.be('string');
    });

    it('should have the property email (base name: "email")', function() {
      expect(typeof instance.email).to.be('string');
    });

    it('should have the property certifiedEmail (base name: "certified_email")', function() {
      expect(typeof instance.certified_email).to.be('string');
    });

    it('should have the property phone (base name: "phone")', function() {
      expect(typeof instance.phone).to.be('string');
    });

    it('should have the property fax (base name: "fax")', function() {
      expect(typeof instance.fax).to.be('string');
    });

    it('should have the property notes (base name: "notes")', function() {
      expect(typeof instance.notes).to.be('string');
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      expect(typeof instance.created_at).to.be('string');
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      expect(typeof instance.updated_at).to.be('string');
    });

  });

}));
