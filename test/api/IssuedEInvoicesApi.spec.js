/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

 import SendEInvoiceRequest from '../../src/model/SendEInvoiceRequest';
 import SendEInvoiceResponse from '../../src/model/SendEInvoiceResponse';
 import VerifyEInvoiceXmlErrorResponse from '../../src/model/VerifyEInvoiceXmlErrorResponse';
 import VerifyEInvoiceXmlResponse from '../../src/model/VerifyEInvoiceXmlResponse';

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.fattureInCloudSdk);
  }
}(this, function(expect, fattureInCloudSdk) {
  'use strict';

  var sandbox = require("sinon").createSandbox();

  var instance = new fattureInCloudSdk.IssuedEInvoicesApi();

  var sendEInvoiceResponseObj = {"data":{"name":"CARICATO","date":"2021-08-23 10:38:03"}};
  var sendEInvoiceStub = sandbox.stub(instance, "sendEInvoice").returns(sendEInvoiceResponseObj);

  var verifyEInvoiceXmlResponseObj = {"data":{"success":true}};
  sandbox.stub(instance, "verifyEInvoiceXml").returns(verifyEInvoiceXmlResponseObj);

  beforeEach(function() {

  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IssuedEInvoicesApi', function() {
    describe('sendEInvoice', function() {
      it('should call sendEInvoice successfully', function(done) {
        var opts = { "sendEInvoiceRequest":
          {"data":{"withholding_tax_causal":"causale"}}
        };
        var response = instance.sendEInvoice(2, opts);
        var responseObj = Object.assign(new SendEInvoiceResponse(), response);
        var expectedJson = JSON.stringify(sendEInvoiceResponseObj);
        var actualJson = JSON.stringify(responseObj);
        expect(actualJson).to.equal(expectedJson);
        expect(sendEInvoiceStub.getCall(0).args[1]).to.equal(opts);
        done();
      });
    });
    describe('verifyEInvoiceXml', function() {
      it('should call verifyEInvoiceXml successfully', function(done) {
        var response = instance.verifyEInvoiceXml();
        var responseObj = Object.assign(new VerifyEInvoiceXmlResponse(), response);
        var expectedJson = JSON.stringify(verifyEInvoiceXmlResponseObj);
        var actualJson = JSON.stringify(responseObj);
        expect(actualJson).to.equal(expectedJson);
        done();
      });
    });
  });

}));
