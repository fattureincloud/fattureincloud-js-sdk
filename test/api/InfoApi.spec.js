/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ListArchiveCategoriesResponse from '../../src/model/ListArchiveCategoriesResponse'
import ListCitiesResponse from '../../src/model/ListCitiesResponse'
import ListCostCentersResponse from '../../src/model/ListCostCentersResponse'
import ListCountriesResponse from '../../src/model/ListCountriesResponse'
import ListDetailedCountriesResponse from '../../src/model/ListDetailedCountriesResponse'
import ListCurrenciesResponse from '../../src/model/ListCurrenciesResponse'
import ListDeliveryNotesDefaultCausalsResponse from '../../src/model/ListDeliveryNotesDefaultCausalsResponse'
import ListLanguagesResponse from '../../src/model/ListLanguagesResponse'
import ListPaymentAccountsResponse from '../../src/model/ListPaymentAccountsResponse'
import ListPaymentMethodsResponse from '../../src/model/ListPaymentMethodsResponse'
import ListProductCategoriesResponse from '../../src/model/ListProductCategoriesResponse'
import ListReceivedDocumentCategoriesResponse from '../../src/model/ListReceivedDocumentCategoriesResponse'
import ListRevenueCentersResponse from '../../src/model/ListRevenueCentersResponse'
import ListTemplatesResponse from '../../src/model/ListTemplatesResponse'
import ListUnitsOfMeasureResponse from '../../src/model/ListUnitsOfMeasureResponse'
import ListVatTypesResponse from '../../src/model/ListVatTypesResponse';

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'))
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.fattureInCloudSdk)
  }
}(this, function (expect, fattureInCloudSdk) {
  'use strict'

  const sandbox = require('sinon').createSandbox()

  const instance = new fattureInCloudSdk.InfoApi()

  const listArchiveCategoriesResponseObj = { data: ['Altri documenti', "Conferme d'ordine", 'Contratti', 'Dichiarazioni dei redditi', 'Documenti per detrazioni', 'Estratti conto bancari', 'Estratti conto carte di credito'] }
  sandbox.stub(instance, 'listArchiveCategories').returns(listArchiveCategoriesResponseObj)

  const listCitiesResponseObj = { data: [{ postal_code: '89867', city: 'Zungri', province: 'VV' }, { postal_code: '83020', city: 'Aiello del Sabato', province: 'AV' }, { postal_code: '83011', city: 'Altavilla Irpina', province: 'AV' }] }
  sandbox.stub(instance, 'listCities').returns(listCitiesResponseObj)

  const listCostCentersResponseObj = { data: ['Negozio Bergamo', 'Negozio Milano'] }
  sandbox.stub(instance, 'listCostCenters').returns(listCostCentersResponseObj)

  const listCountriesResponseObj = { data: ['Italia', 'Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Angola', 'Anguilla', '...'] }
  sandbox.stub(instance, 'listCountries').returns(listCountriesResponseObj)

  const listDetailedCountriesResponseObj = { data: [{ name: 'Italia', settings_name: 'Italia', iso: 'IT', fiscal_iso: 'IT', uic: '086' }, { name: 'Albania', settings_name: 'Albania', iso: 'AL', fiscal_iso: 'AL', uic: '087' }] }
  sandbox.stub(instance, 'listDetailedCountries').returns(listDetailedCountriesResponseObj)

  const listCurrenciesResponseObj = { data: [{ id: 'AED', symbol: 'AED', html_symbol: 'AED', exchange_rate: '4.09500' }, { id: 'EUR', symbol: '\u20ac', html_symbol: 'â‚¬', exchange_rate: '1.00000' }] }
  sandbox.stub(instance, 'listCurrencies').returns(listCurrenciesResponseObj)

  const listDeliveryNotesDefaultCausalsResponseObj = { data: ['Vendita', 'Conto visione', 'Conto deposito', 'Conto vendita', 'Tentata vendita', "Prestito d'uso", 'Conto lavorazione', 'Omaggio', 'Riparazione', 'Reso per accredito', 'Reso per sostituzione'] }
  sandbox.stub(instance, 'listDeliveryNotesDefaultCausals').returns(listDeliveryNotesDefaultCausalsResponseObj)

  const listLanguagesResponseObj = { data: [{ code: 'it', name: 'Italiano' }, { code: 'en', name: 'Inglese' }] }
  sandbox.stub(instance, 'listLanguages').returns(listLanguagesResponseObj)

  const listPaymentAccountsResponseObj = { data: [{ id: 21, name: 'Indesa - Carta conto', type: 'standard', iban: null, sia: null, virtual: false }, { id: 109, name: 'Indesa', type: 'bank', iban: 'IT17A1234563200000003498936', sia: 'IN234', virtual: false }] }
  sandbox.stub(instance, 'listPaymentAccounts').returns(listPaymentAccountsResponseObj)

  const listPaymentMethodsResponseObj = { data: [{ id: 12345, name: 'Carta di credito', is_default: false, default_payment_account: null }, { id: 12346, name: 'Bonifico bancario', is_default: true, default_payment_account: null }] }
  sandbox.stub(instance, 'listPaymentMethods').returns(listPaymentMethodsResponseObj)

  const listProductCategoriesResponseObj = { data: ['Alimentari', 'Arredamento'] }
  sandbox.stub(instance, 'listProductCategories').returns(listProductCategoriesResponseObj)

  const listReceivedDocumentCategoriesResponseObj = { data: ['Telefono e internet', 'Assicurazioni e quote', 'Auto ed altri veicoli', 'Computer e accessori', 'Server e hosting'] }
  sandbox.stub(instance, 'listReceivedDocumentCategories').returns(listReceivedDocumentCategoriesResponseObj)

  const listRevenueCentersResponseObj = { data: ['Negozio Bergamo', 'Negozio Milano'] }
  sandbox.stub(instance, 'listRevenueCenters').returns(listRevenueCentersResponseObj)

  const listTemplatesResponseObj = { data: [{ id: 10, name: 'New Standard S1' }, { id: 106, name: 'Minimalist' }] }
  sandbox.stub(instance, 'listTemplates').returns(listTemplatesResponseObj)

  const listUnitsOfMeasureResponseObj = { data: ['pezzi', 'kg', 'litri', 'ore', 'giorni', 'km', 'mesi'] }
  sandbox.stub(instance, 'listUnitsOfMeasure').returns(listUnitsOfMeasureResponseObj)

  const listVatTypesResponseObj = { data: [{ id: 0, value: 22, description: 'Non imponibile art. 123', notes: "IVA non imponibile ai sensi dell'articolo 123, comma 2", e_invoice: 'string', ei_type: 2, ei_description: 'string', editable: true }, { id: 1010, value: 0, description: 'NON IMPONIBILE IVA EX ART. 8 COMMA 1 LETT.A', notes: '', e_invoice: false, ei_type: 0, ei_description: null, is_disabled: false, editable: true }] }
  sandbox.stub(instance, 'listVatTypes').returns(listVatTypesResponseObj)

  beforeEach(function () {

  })

  // const getProperty = function (object, getter, property) {
  //   // Use getter method if present; otherwise, get the property directly.
  //   if (typeof object[getter] === 'function') { return object[getter]() } else { return object[property] }
  // }

  // const setProperty = function (object, setter, property, value) {
  //   // Use setter method if present; otherwise, set the property directly.
  //   if (typeof object[setter] === 'function') { object[setter](value) } else { object[property] = value }
  // }

  describe('InfoApi', function () {
    describe('listArchiveCategories', function () {
      it('should call listArchiveCategories successfully', function (done) {
        const response = instance.listArchiveCategories()
        const responseObj = Object.assign(new ListArchiveCategoriesResponse(), response)
        const expectedJson = JSON.stringify(listArchiveCategoriesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listCities', function () {
      it('should call listCities successfully', function (done) {
        const response = instance.listCities()
        const responseObj = Object.assign(new ListCitiesResponse(), response)
        const expectedJson = JSON.stringify(listCitiesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listCostCenters', function () {
      it('should call listCostCenters successfully', function (done) {
        const response = instance.listCostCenters()
        const responseObj = Object.assign(new ListCostCentersResponse(), response)
        const expectedJson = JSON.stringify(listCostCentersResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listCountries', function () {
      it('should call listCountries successfully', function (done) {
        const response = instance.listCountries()
        const responseObj = Object.assign(new ListCountriesResponse(), response)
        const expectedJson = JSON.stringify(listCountriesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listDetailedCountries', function () {
      it('should call listDetailedCountries successfully', function (done) {
        const response = instance.listDetailedCountries()
        const responseObj = Object.assign(new ListDetailedCountriesResponse(), response)
        const expectedJson = JSON.stringify(listDetailedCountriesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listCurrencies', function () {
      it('should call listCurrencies successfully', function (done) {
        const response = instance.listCurrencies()
        const responseObj = Object.assign(new ListCurrenciesResponse(), response)
        const expectedJson = JSON.stringify(listCurrenciesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listDeliveryNotesDefaultCausals', function () {
      it('should call listDeliveryNotesDefaultCausals successfully', function (done) {
        const response = instance.listDeliveryNotesDefaultCausals()
        const responseObj = Object.assign(new ListDeliveryNotesDefaultCausalsResponse(), response)
        const expectedJson = JSON.stringify(listDeliveryNotesDefaultCausalsResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listLanguages', function () {
      it('should call listLanguages successfully', function (done) {
        const response = instance.listLanguages()
        const responseObj = Object.assign(new ListLanguagesResponse(), response)
        const expectedJson = JSON.stringify(listLanguagesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listPaymentAccounts', function () {
      it('should call listPaymentAccounts successfully', function (done) {
        const response = instance.listPaymentAccounts()
        const responseObj = Object.assign(new ListPaymentAccountsResponse(), response)
        const expectedJson = JSON.stringify(listPaymentAccountsResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listPaymentMethods', function () {
      it('should call listPaymentMethods successfully', function (done) {
        const response = instance.listPaymentMethods()
        const responseObj = Object.assign(new ListPaymentMethodsResponse(), response)
        const expectedJson = JSON.stringify(listPaymentMethodsResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listProductCategories', function () {
      it('should call listProductCategories successfully', function (done) {
        const response = instance.listProductCategories()
        const responseObj = Object.assign(new ListProductCategoriesResponse(), response)
        const expectedJson = JSON.stringify(listProductCategoriesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listReceivedDocumentCategories', function () {
      it('should call listReceivedDocumentCategories successfully', function (done) {
        const response = instance.listReceivedDocumentCategories()
        const responseObj = Object.assign(new ListReceivedDocumentCategoriesResponse(), response)
        const expectedJson = JSON.stringify(listReceivedDocumentCategoriesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listRevenueCenters', function () {
      it('should call listRevenueCenters successfully', function (done) {
        const response = instance.listRevenueCenters()
        const responseObj = Object.assign(new ListRevenueCentersResponse(), response)
        const expectedJson = JSON.stringify(listRevenueCentersResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listTemplates', function () {
      it('should call listTemplates successfully', function (done) {
        const response = instance.listTemplates()
        const responseObj = Object.assign(new ListTemplatesResponse(), response)
        const expectedJson = JSON.stringify(listTemplatesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listUnitsOfMeasure', function () {
      it('should call listUnitsOfMeasure successfully', function (done) {
        const response = instance.listUnitsOfMeasure()
        const responseObj = Object.assign(new ListUnitsOfMeasureResponse(), response)
        const expectedJson = JSON.stringify(listUnitsOfMeasureResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listVatTypes', function () {
      it('should call listVatTypes successfully', function (done) {
        const response = instance.listVatTypes()
        const responseObj = Object.assign(new ListVatTypesResponse(), response)
        const expectedJson = JSON.stringify(listVatTypesResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
  })
}))
