/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import CreateSupplierResponse from '../../src/model/CreateSupplierResponse'
import GetSupplierResponse from '../../src/model/GetSupplierResponse'
import ListSuppliersResponse from '../../src/model/ListSuppliersResponse'
import ModifySupplierResponse from '../../src/model/ModifySupplierResponse';

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'))
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.fattureInCloudSdk)
  }
}(this, function (expect, fattureInCloudSdk) {
  'use strict'

  const sandbox = require('sinon').createSandbox()

  const instance = new fattureInCloudSdk.SuppliersApi()

  const createSupplierResponseObj = { data: { id: 12345, code: 'AE86', name: 'Mario Rossi S.R.L.', type: 'company', first_name: 'Mario', last_name: 'Rossi', contact_person: '', vat_number: '111222333', tax_code: '111122233', address_street: 'Corso Magellano, 46', address_postal_code: '20146', address_city: 'Milano', address_province: 'MI', address_extra: '', country: 'Italia', email: 'mario.rossi@example.com', certified_email: 'mario.rossi@pec.example.com', phone: '1234567890', fax: '123456789', notes: '' } }
  const createSupplierStub = sandbox.stub(instance, 'createSupplier').returns(createSupplierResponseObj)

  const deleteSupplierResponseObj = {}
  sandbox.stub(instance, 'deleteSupplier').returns(deleteSupplierResponseObj)

  const getSupplierResponseObj = { data: { id: 12345, code: 'AE86', name: 'Mario Rossi S.R.L.', type: 'company', first_name: 'Mario', last_name: 'Rossi', contact_person: '', vat_number: '111222333', tax_code: '111122233', address_street: 'Corso Magellano, 46', address_postal_code: '20146', address_city: 'Milano', address_province: 'MI', address_extra: '', country: 'Italia', email: 'mario.rossi@example.com', certified_email: 'mario.rossi@pec.example.com', phone: '1234567890', fax: '123456789', notes: '' } }
  sandbox.stub(instance, 'getSupplier').returns(getSupplierResponseObj)

  const listSuppliersResponseObj = { first_page_url: 'page=1', from: 1, last_page: 2, last_page_url: 'page=2', next_page_url: 'page=2', path: '/entities/suppliers', per_page: 50, prev_page_url: null, to: 55, total: 55, data: [{ id: 12345, code: 'AE86', name: 'Mario Rossi S.R.L.', type: 'company', first_name: 'Mario', last_name: 'Rossi', contact_person: '', vat_number: '111222333', tax_code: '111122233', address_street: 'Corso Magellano, 46', address_postal_code: '20146', address_city: 'Milano', address_province: 'MI', address_extra: '', country: 'Italia', email: 'mario.rossi@example.com', certified_email: 'mario.rossi@pec.example.com', phone: '1234567890', fax: '123456789', notes: '', created_at: '2021-15-08', updated_at: '2021-15-08' }, { id: 12346, code: 'GT86', name: 'Maria Grossi S.R.L.', type: 'company', first_name: '', last_name: '', contact_person: '', vat_number: '200020102020', tax_code: '200020102020', address_street: 'Vicolo stretto, 32', address_postal_code: '20146', address_city: 'Milano', address_province: 'MI', address_extra: '', country: 'Italia', email: 'maria.grossi@example.com', certified_email: 'maria.grossi@pec.example.com', phone: '0987654321', fax: '098765432', notes: '', created_at: '2021-15-09', updated_at: '2021-15-09' }] }
  sandbox.stub(instance, 'listSuppliers').returns(listSuppliersResponseObj)

  const modifySupplierResponseObj = { data: { id: 12345, code: 'AE86', name: 'Mario Rossi S.R.L.', type: 'company', first_name: 'Mario', last_name: 'Rossi', contact_person: '', vat_number: '111222333', tax_code: '111122233', address_street: 'Corso Magellano, 46', address_postal_code: '20146', address_city: 'Milano', address_province: 'MI', address_extra: '', country: 'Italia', email: 'mario.rossi@example.com', certified_email: 'mario.rossi@pec.example.com', phone: '1234567890', fax: '123456789', notes: '' } }
  const modifySupplierStub = sandbox.stub(instance, 'modifySupplier').returns(modifySupplierResponseObj)

  beforeEach(function () {

  })

  // const getProperty = function (object, getter, property) {
  //   // Use getter method if present; otherwise, get the property directly.
  //   if (typeof object[getter] === 'function') { return object[getter]() } else { return object[property] }
  // }

  // const setProperty = function (object, setter, property, value) {
  //   // Use setter method if present; otherwise, set the property directly.
  //   if (typeof object[setter] === 'function') { object[setter](value) } else { object[property] = value }
  // }

  describe('SuppliersApi', function () {
    describe('createSupplier', function () {
      it('should call createSupplier successfully', function (done) {
        const opts = {
          createSupplierRequest:
          { data: { code: 'asd12345', name: 'Mario Rossi S.R.L.', type: 'company', first_name: 'Mario', last_name: 'Rossi', contact_person: '', vat_number: '111222333', tax_code: '111122233', address_street: 'Corso Magellano, 46', address_postal_code: '20146', address_city: 'Milano', address_province: 'MI', address_extra: '', country: 'Italia', email: 'mario.rossi@example.com', certified_email: 'mario.rossi@pec.example.com', phone: '1234567890', fax: '123456789', notes: '' } }
        }
        const response = instance.createSupplier(2, opts)
        const responseObj = Object.assign(new CreateSupplierResponse(), response)
        const expectedJson = JSON.stringify(createSupplierResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        expect(createSupplierStub.getCall(0).args[1]).to.equal(opts)
        done()
      })
    })
    describe('deleteSupplier', function () {
      it('should call deleteSupplier successfully', function (done) {
        expect(1).to.equal(1)
        done()
      })
    })
    describe('getSupplier', function () {
      it('should call getSupplier successfully', function (done) {
        const response = instance.getSupplier()
        const responseObj = Object.assign(new GetSupplierResponse(), response)
        const expectedJson = JSON.stringify(getSupplierResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listSuppliers', function () {
      it('should call listSuppliers successfully', function (done) {
        const response = instance.listSuppliers()
        const responseObj = Object.assign(new ListSuppliersResponse(), response)
        const expectedJson = JSON.stringify(listSuppliersResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('modifySupplier', function () {
      it('should call modifySupplier successfully', function (done) {
        const opts = {
          modifySupplierRequest:
          { data: { address_street: 'Corso Ateneo 69' } }
        }
        const response = instance.modifySupplier(2, 12345, opts)
        const responseObj = Object.assign(new ModifySupplierResponse(), response)
        const expectedJson = JSON.stringify(modifySupplierResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        expect(modifySupplierStub.getCall(0).args[2]).to.equal(opts)
        done()
      })
    })
  })
}))
