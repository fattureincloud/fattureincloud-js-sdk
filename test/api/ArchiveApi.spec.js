/**
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol. For more information, please visit https://www.fattureincloud.it.
 *
 * The version of the OpenAPI document: 2.0.2
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import CreateArchiveDocumentResponse from '../../src/model/CreateArchiveDocumentResponse'
import GetArchiveDocumentResponse from '../../src/model/GetArchiveDocumentResponse'
import ListArchiveDocumentsResponse from '../../src/model/ListArchiveDocumentsResponse'
import ModifyArchiveDocumentResponse from '../../src/model/ModifyArchiveDocumentResponse'
import UploadArchiveAttachmentResponse from '../../src/model/UploadArchiveAttachmentResponse';

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'))
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.fattureInCloudSdk)
  }
}(this, function (expect, fattureInCloudSdk) {
  'use strict'

  const sandbox = require('sinon').createSandbox()

  const instance = new fattureInCloudSdk.ArchiveApi()

  const createArchiveDocumentResponseObj = { data: { id: 12345, date: '2021-08-20', category: 'Altri documenti', description: 'spesa 2', attachment_url: 'spesa2.pdf' } }
  const createArchiveDocumentStub = sandbox.stub(instance, 'createArchiveDocument').returns(createArchiveDocumentResponseObj)

  const deleteArchiveDocumentResponseObj = {}
  sandbox.stub(instance, 'deleteArchiveDocument').returns(deleteArchiveDocumentResponseObj)

  const getArchiveDocumentResponseObj = { data: { id: 12345, date: '2021-08-20', category: 'Altri documenti', description: 'spesa 2', attachment_url: 'spesa2.pdf' } }
  sandbox.stub(instance, 'getArchiveDocument').returns(getArchiveDocumentResponseObj)

  const listArchiveDocumentsResponseObj = { current_page: 1, data: [{ id: 12345, date: '2021-08-20', category: 'Altri documenti', description: 'spesa 2', attachment_url: 'spesa2.pdf' }, { id: 12346, date: '2021-08-19', category: 'Altri documenti', description: 'spesa 1', attachment_url: 'spesa1.pdf' }], first_page_url: 'page=1', from: 1, last_page: 1, last_page_url: 'page=1', next_page_url: null, path: '/archive', per_page: 50, prev_page_url: null, to: 2, total: 2 }
  sandbox.stub(instance, 'listArchiveDocuments').returns(listArchiveDocumentsResponseObj)

  const modifyArchiveDocumentResponseObj = { data: { id: 12345, date: '2021-08-20', category: 'Altri documenti', description: 'spesa 2', attachment_url: 'spesa2.pdf' } }
  const modifyArchiveDocumentStub = sandbox.stub(instance, 'modifyArchiveDocument').returns(modifyArchiveDocumentResponseObj)

  const uploadArchiveDocumentAttachmentResponseObj = { data: { attachment_token: 'YmMyNWYxYzIwMTU3N2Y4ZGE3ZjZiMzg5OWY0ODNkZDQveXl5LmRvYw' } }
  sandbox.stub(instance, 'uploadArchiveDocumentAttachment').returns(uploadArchiveDocumentAttachmentResponseObj)

  beforeEach(function () {

  })

  // const getProperty = function (object, getter, property) {
  //   // Use getter method if present; otherwise, get the property directly.
  //   if (typeof object[getter] === 'function') { return object[getter]() } else { return object[property] }
  // }

  // const setProperty = function (object, setter, property, value) {
  //   // Use setter method if present; otherwise, set the property directly.
  //   if (typeof object[setter] === 'function') { object[setter](value) } else { object[property] = value }
  // }

  describe('ArchiveApi', function () {
    describe('createArchiveDocument', function () {
      it('should call createArchiveDocument successfully', function (done) {
        const opts = {
          createArchiveDocumentRequest:
           { data: { date: '2021-08-20', category: 'Altri documenti', description: 'spesa 1', attachment_token: 'YjFrbmNlc3E0NmNuaW5ocXQ0b2p0c202NG1ncWx6ZmsvZmlsZW5hbWU' } }
        }
        const response = instance.createArchiveDocument(2, opts)
        const responseObj = Object.assign(new CreateArchiveDocumentResponse(), response)
        const expectedJson = JSON.stringify(createArchiveDocumentResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        expect(createArchiveDocumentStub.getCall(0).args[1]).to.equal(opts)
        done()
      })
    })
    describe('deleteArchiveDocument', function () {
      it('should call deleteArchiveDocument successfully', function (done) {
        expect(1).to.equal(1)
        done()
      })
    })
    describe('getArchiveDocument', function () {
      it('should call getArchiveDocument successfully', function (done) {
        const response = instance.getArchiveDocument()
        const responseObj = Object.assign(new GetArchiveDocumentResponse(), response)
        const expectedJson = JSON.stringify(getArchiveDocumentResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('listArchiveDocuments', function () {
      it('should call listArchiveDocuments successfully', function (done) {
        const response = instance.listArchiveDocuments()
        const responseObj = Object.assign(new ListArchiveDocumentsResponse(), response)
        const expectedJson = JSON.stringify(listArchiveDocumentsResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
    describe('modifyArchiveDocument', function () {
      it('should call modifyArchiveDocument successfully', function (done) {
        const opts = {
          modifyArchiveDocumentRequest:
           { data: { description: 'spesa lululu' } }
        }
        const response = instance.modifyArchiveDocument(2, 12345, opts)
        const responseObj = Object.assign(new ModifyArchiveDocumentResponse(), response)
        const expectedJson = JSON.stringify(modifyArchiveDocumentResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        expect(modifyArchiveDocumentStub.getCall(0).args[2]).to.equal(opts)
        done()
      })
    })
    describe('uploadArchiveDocumentAttachment', function () {
      it('should call uploadArchiveDocumentAttachment successfully', function (done) {
        const response = instance.uploadArchiveDocumentAttachment()
        const responseObj = Object.assign(new UploadArchiveAttachmentResponse(), response)
        const expectedJson = JSON.stringify(uploadArchiveDocumentAttachmentResponseObj)
        const actualJson = JSON.stringify(responseObj)
        expect(actualJson).to.equal(expectedJson)
        done()
      })
    })
  })
}))
